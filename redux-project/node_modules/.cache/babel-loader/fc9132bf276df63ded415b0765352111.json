{"ast":null,"code":"import * as actionTypes from './actions';\nconst initialState = {\n  counter: 0,\n  results: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.INCREMENT:\n      return { ...state,\n        counter: state.counter + 1\n      };\n\n    case actionTypes.DECREMENT:\n      return { ...state,\n        counter: state.counter - 1\n      };\n\n    case actionTypes.ADD:\n      return { ...state,\n        counter: state.counter + action.value\n      };\n\n    case actionTypes.DELETE:\n      return { ...state,\n        counter: state.counter - action.value\n      };\n\n    case actionTypes.STORE_RESULT:\n      return { ...state,\n        results: state.results.concat({\n          id: new Date(),\n          value: state.counter\n        })\n      };\n\n    case actionTypes.DELETE_RESULT:\n      //****One Way  to immutably changing the results***\n      //but it does not do deep cloning.\n      // const id=2;\n      // const newArray=[...state.results];\n      // newArray.splice(id,1);\n      //this will mutate our original state\n      // state.results.splice(id,1);\n\n      /*here it checks every elt id of array with the one to delete,if does not matches \n      *then create a new array with those elements and leave which matches that given condition*/\n      const updatedArray = state.results.filter(result => result.id !== action.resultElId);\n      return { ...state,\n        results: updatedArray\n      };\n  } //it returns thr current  state.\n\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/gunjan/Desktop/redux-project/src/store/reducer.js"],"names":["actionTypes","initialState","counter","results","reducer","state","action","type","INCREMENT","DECREMENT","ADD","value","DELETE","STORE_RESULT","concat","id","Date","DELETE_RESULT","updatedArray","filter","result","resultElId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,WAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,CADQ;AAEjBC,EAAAA,OAAO,EAAC;AAFS,CAArB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAE9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKP,WAAW,CAACQ,SAAjB;AACI,aAAO,EACP,GAAGH,KADI;AAEPH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAFlB,OAAP;;AAKJ,SAAKF,WAAW,CAACS,SAAjB;AACI,aAAO,EACP,GAAGJ,KADI;AAEPH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgB;AAFlB,OAAP;;AAKJ,SAAKF,WAAW,CAACU,GAAjB;AACI,aAAO,EACP,GAAGL,KADI;AAEPH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFzB,OAAP;;AAKJ,SAAKX,WAAW,CAACY,MAAjB;AACI,aAAO,EACP,GAAGP,KADI;AAEPH,QAAAA,OAAO,EAAEG,KAAK,CAACH,OAAN,GAAgBI,MAAM,CAACK;AAFzB,OAAP;;AAKJ,SAAKX,WAAW,CAACa,YAAjB;AACI,aAAM,EACF,GAAGR,KADD;AAEFF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,CAAcW,MAAd,CAAqB;AAACC,UAAAA,EAAE,EAAC,IAAIC,IAAJ,EAAJ;AAAgBL,UAAAA,KAAK,EAACN,KAAK,CAACH;AAA5B,SAArB;AAFN,OAAN;;AAKJ,SAAKF,WAAW,CAACiB,aAAjB;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;AAEA,YAAMC,YAAY,GAACb,KAAK,CAACF,OAAN,CAAcgB,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACL,EAAP,KAAcT,MAAM,CAACe,UAApD,CAAnB;AACA,aAAM,EACF,GAAGhB,KADD;AAEFF,QAAAA,OAAO,EAACe;AAFN,OAAN;AA5CR,GAF8C,CAqD9C;;;AACA,SAAOb,KAAP;AACH,CAvDD;;AAyDA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './actions';\n\nconst initialState = {\n    counter: 0,\n    results:[]\n}\n\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case actionTypes.INCREMENT : \n            return {\n            ...state,\n            counter: state.counter + 1\n        };\n\n        case actionTypes.DECREMENT : \n            return {\n            ...state,\n            counter: state.counter - 1\n        };\n\n        case actionTypes.ADD : \n            return {\n            ...state,\n            counter: state.counter + action.value\n        };\n\n        case actionTypes.DELETE : \n            return {\n            ...state,\n            counter: state.counter - action.value\n        };\n\n        case actionTypes.STORE_RESULT :\n            return{\n                ...state,\n                results:state.results.concat({id:new Date() ,value:state.counter})\n            }\n        \n        case actionTypes.DELETE_RESULT :\n            //****One Way  to immutably changing the results***\n            //but it does not do deep cloning.\n            // const id=2;\n            // const newArray=[...state.results];\n            // newArray.splice(id,1);\n\n            //this will mutate our original state\n            // state.results.splice(id,1);\n\n            /*here it checks every elt id of array with the one to delete,if does not matches \n            *then create a new array with those elements and leave which matches that given condition*/\n            const updatedArray=state.results.filter(result => result.id !== action.resultElId);\n            return{\n                ...state,\n                results:updatedArray\n            }    \n            \n\n    }\n    //it returns thr current  state.\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}