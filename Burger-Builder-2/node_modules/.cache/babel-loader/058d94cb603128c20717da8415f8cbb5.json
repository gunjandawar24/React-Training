{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default (httpClient => {\n  const [error, setError] = useState(null);\n  const reqInterceptor = httpClient.interceptors.request.use(req => {\n    setError(null);\n    return req;\n  });\n  const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\n    setError(err);\n  });\n  useEffect(() => {\n    return () => {\n      httpClient.interceptors.request.eject(reqInterceptor);\n      httpClient.interceptors.response.eject(resInterceptor);\n    };\n  }, [reqInterceptor, resInterceptor]); //function to clear the error.\n\n  const errorConfirmedHandler = () => {\n    setError(null);\n  };\n\n  return [error, errorConfirmedHandler];\n}); // import { useState , use } from 'react';\n// export default httpClient = {\n//     const [error,setError] = useState(null);\n//         //automatically generate error like network error..\n//         /*i want this code to get executed as soon as components is \n//         created bcz it can check if igredients are nulll or not if yes then generate network error.*/\n//         //so this can be done using constructor or componentwillmount not with componentdidmount bcz it get executed at last\n//         //i want this to be called before child components are renderd \n//         //if we add/wrap this hoc with other components then this constructor is called again again again so need to unmount \n//             const reqInterceptor = httpClient.interceptors.request.use(req => {\n//                 setError(null);\n//                 return req;\n//             });\n//             const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\n//                 setError(err)\n//             }); \n//             //clean up work is happening here when interceptors gets changed .\n//             useEffect(() => {\n//                 return () => {\n//                     httpClient.interceptors.request.eject(reqInterceptor);\n//                     httpClient.interceptors.response.eject(resInterceptor);\n//                 }\n//             },[reqInterceptor,resInterceptor]);\n//         const errorConfirmedHandler = () => {\n//            setError(null);\n//         }\n//         return [error, errorConfirmedHandler];\n// }","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/hooks/http-error-handler.js"],"names":["useState","useEffect","httpClient","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","eject","errorConfirmedHandler"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,gBAAeC,UAAU,IAAI;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMK,cAAc,GAAGH,UAAU,CAACI,YAAX,CAAwBC,OAAxB,CAAgCC,GAAhC,CAAoCC,GAAG,IAAI;AAChEL,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACA,WAAOK,GAAP;AACD,GAHsB,CAAvB;AAIA,QAAMC,cAAc,GAAGR,UAAU,CAACI,YAAX,CAAwBK,QAAxB,CAAiCH,GAAjC,CACrBI,GAAG,IAAIA,GADc,EAErBC,GAAG,IAAI;AACLT,IAAAA,QAAQ,CAACS,GAAD,CAAR;AACD,GAJoB,CAAvB;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXC,MAAAA,UAAU,CAACI,YAAX,CAAwBC,OAAxB,CAAgCO,KAAhC,CAAsCT,cAAtC;AACAH,MAAAA,UAAU,CAACI,YAAX,CAAwBK,QAAxB,CAAiCG,KAAjC,CAAuCJ,cAAvC;AACD,KAHD;AAID,GALQ,EAKN,CAACL,cAAD,EAAiBK,cAAjB,CALM,CAAT,CAdyB,CAqBzB;;AACA,QAAMK,qBAAqB,GAAG,MAAM;AAClCX,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAFD;;AAIA,SAAO,CAACD,KAAD,EAAQY,qBAAR,CAAP;AACH,CA3BD,E,CAgDA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default httpClient => {\n    const [error, setError] = useState(null);\n\n    const reqInterceptor = httpClient.interceptors.request.use(req => {\n      setError(null);\n      return req;\n    });\n    const resInterceptor = httpClient.interceptors.response.use(\n      res => res,\n      err => {\n        setError(err);\n      }\n    );\n\n    useEffect(() => {\n      return () => {\n        httpClient.interceptors.request.eject(reqInterceptor);\n        httpClient.interceptors.response.eject(resInterceptor);\n      };\n    }, [reqInterceptor, resInterceptor]);\n\n    //function to clear the error.\n    const errorConfirmedHandler = () => {\n      setError(null);\n    };\n\n    return [error, errorConfirmedHandler];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { useState , use } from 'react';\n\n// export default httpClient = {\n\n//     const [error,setError] = useState(null);\n\n//         //automatically generate error like network error..\n//         /*i want this code to get executed as soon as components is \n//         created bcz it can check if igredients are nulll or not if yes then generate network error.*/\n//         //so this can be done using constructor or componentwillmount not with componentdidmount bcz it get executed at last\n//         //i want this to be called before child components are renderd \n//         //if we add/wrap this hoc with other components then this constructor is called again again again so need to unmount \n      \n//             const reqInterceptor = httpClient.interceptors.request.use(req => {\n//                 setError(null);\n//                 return req;\n//             });\n//             const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\n//                 setError(err)\n//             }); \n            \n    \n//             //clean up work is happening here when interceptors gets changed .\n//             useEffect(() => {\n//                 return () => {\n//                     httpClient.interceptors.request.eject(reqInterceptor);\n//                     httpClient.interceptors.response.eject(resInterceptor);\n//                 }\n//             },[reqInterceptor,resInterceptor]);\n\n//         const errorConfirmedHandler = () => {\n//            setError(null);\n//         }\n//         return [error, errorConfirmedHandler];\n// }"]},"metadata":{},"sourceType":"module"}