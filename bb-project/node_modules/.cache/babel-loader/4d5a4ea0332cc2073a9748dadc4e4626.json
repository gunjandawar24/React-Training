{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.6,\n  meat: 1.5,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        cheese: 0,\n        meat: 0,\n        salad: 0,\n        bacon: 0\n      },\n      totalPrice: 4,\n      purchasable: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, elt) => {\n        return sum + elt;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientsHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientsHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n  }\n\n  render() {\n    //tell which button should be enabled or disabled. \n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    } //{salad:true,meat:false,...} and if its true then it is disabled.\n\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BurgerControls, {\n      ingredientsAdd: this.addIngredientsHandler,\n      ingredientsRemove: this.removeIngredientsHandler,\n      disabled: disabledInfo,\n      purchasable: this.state.purchasable,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BurgerControls","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","updatePurchaseState","sum","Object","keys","map","igKey","reduce","elt","setState","addIngredientsHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","removeIngredientsHandler","priceDeduction","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\n\n\nconst INGREDIENT_PRICES={\n    salad:0.5,\n    cheese:0.6,\n    meat:1.5,\n    bacon:1\n}\n\n\n\n\nclass BurgerBuilder extends Component{\n    state={\n        ingredients:{\n            cheese:0,\n            meat:0,\n            salad:0,\n            bacon:0\n        },\n     totalPrice:4,    \n     purchasable:false,\n       \n    }\n\n//I want array of values from ingredients objects and need to reduce it to a single value(Sum)\n//sum is constantly updated in reduce function by each element(value) of the the array\n//if sum>0 then set purchasable to true or else false.\nupdatePurchaseState=(ingredients)=>{\n    \n    const sum=Object.keys(ingredients)\n    .map(igKey=>{\n        return ingredients[igKey];\n    })\n    .reduce((sum,elt)=>{\n        return sum+elt;\n    },0);\n    this.setState({purchasable: sum>0})\n\n};\n\n\n\naddIngredientsHandler=(type)=>{\n    const oldCount=this.state.ingredients[type];\n    const updatedCount=oldCount+1;\n    const updatedIngredients={\n        ...this.state.ingredients\n    };\n    updatedIngredients[type]=updatedCount;\n    const priceAddition=INGREDIENT_PRICES[type];\n    const oldPrice=this.state.totalPrice;\n    const newPrice=oldPrice+priceAddition;\n    this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n\n}\n\nremoveIngredientsHandler=(type)=>{\n    const oldCount=this.state.ingredients[type];\n    if(oldCount<=0){\n        return;\n    }\n    const updatedCount=oldCount-1;\n    const updatedIngredients={\n        ...this.state.ingredients\n    };\n    updatedIngredients[type]=updatedCount;\n    const priceDeduction=INGREDIENT_PRICES[type];\n    const oldPrice=this.state.totalPrice;\n    const newPrice=oldPrice-priceDeduction;\n    this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n\n}\n    render(){\n        //tell which button should be enabled or disabled. \n        const disabledInfo={\n            ...this.state.ingredients\n        };\n        for(let key in disabledInfo){\n            disabledInfo[key]=disabledInfo[key]<=0\n        }\n        //{salad:true,meat:false,...} and if its true then it is disabled.\n        return(\n            <Aux>\n                <Burger ingredients={this.state.ingredients}/>\n                <BurgerControls \n                    ingredientsAdd={this.addIngredientsHandler} \n                    ingredientsRemove={this.removeIngredientsHandler}\n                    disabled={disabledInfo}\n                    purchasable={this.state.purchasable}\n                    price={this.state.totalPrice}/>\n            </Aux>    \n        );\n    }\n\n\n}\n\nexport default BurgerBuilder;\n\n\n"]},"metadata":{},"sourceType":"module"}