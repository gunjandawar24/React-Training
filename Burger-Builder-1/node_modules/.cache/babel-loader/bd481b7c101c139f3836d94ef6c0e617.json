{"ast":null,"code":"import * as actioTypes from './actionTypes';\nimport axios from '../../axios-orders'; //onSuccess=id and orderData is fetched from the backend becoz we want store it in the orders array.\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_START\n  };\n}; //async action-creator \n//this action gets dispatched once we click the order button.\n//here orderdata is like userData ,addIngredients..\n\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json?auth=' + token, orderData).then(response => {\n      console.log(response.data);\n      console.log(orderData);\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actioTypes.PURCHASE_INIT\n  };\n}; //error here is handled using high order component wrap to connect in ContactData\n\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actioTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n}; //this will set loading to true.\n\nexport const fetchOrdersStart = () => {\n  return {\n    type: actioTypes.FETCH_ORDERS_START\n  };\n}; // if we are authenticated and have a token then only we can reach to orders.\n\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    //this will set loading to true first.\n    dispatch(fetchOrdersStart()); //orderBy is used by firebase to filter out the data .\n\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('/orders.json' + queryParams).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/store/actions/order.js"],"names":["actioTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","userId","queryParams","get","res","fetchedOrders","key","push","err"],"mappings":"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","sourcesContent":["import * as actioTypes from './actionTypes';\nimport axios from '../../axios-orders';\n\n//onSuccess=id and orderData is fetched from the backend becoz we want store it in the orders array.\nexport const purchaseBurgerSuccess = (id,orderData) => {\n    return{\n        type:actioTypes.PURCHASE_BURGER_SUCCESS,\n        orderId:id,\n        orderData:orderData\n    };\n\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type:actioTypes.PURCHASE_BURGER_FAIL,\n        error:error\n    }\n\n};\n\nexport const purchaseBurgerStart = () => {\n    return{\n        type:actioTypes.PURCHASE_BURGER_START\n    }\n}\n\n//async action-creator \n//this action gets dispatched once we click the order button.\n//here orderdata is like userData ,addIngredients..\nexport const purchaseBurger = (orderData,token) => {\n    return dispatch => {\n\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json?auth=' + token ,orderData)\n    .then(response => {\n        console.log(response.data);\n        console.log(orderData);\n        dispatch(purchaseBurgerSuccess(response.data.name,orderData));\n    })\n    .catch(error =>{\n        dispatch(purchaseBurgerFail(error));\n    });\n    }\n}\n\nexport const purchaseInit = () => {\n    return{\n        type:actioTypes.PURCHASE_INIT\n    }\n}\n\n//error here is handled using high order component wrap to connect in ContactData\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type:actioTypes.FETCH_ORDERS_SUCCESS,\n        orders:orders\n    }\n}\n\nexport const fetchOrdersFail = (error) => {\n    return {\n        type:actioTypes.PURCHASE_BURGER_FAIL,\n        error:error\n    }\n}\n\n//this will set loading to true.\nexport const fetchOrdersStart = () => {\n    return {\n        type:actioTypes.FETCH_ORDERS_START\n    }\n}\n\n// if we are authenticated and have a token then only we can reach to orders.\nexport const fetchOrders = (token,userId) => {\n    return dispatch => {\n        //this will set loading to true first.\n        dispatch(fetchOrdersStart());\n        //orderBy is used by firebase to filter out the data .\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n        axios.get( '/orders.json' +queryParams)\n            .then(res => {\n                const fetchedOrders = []; \n                for (let key in res.data) {\n                    fetchedOrders.push({\n                        ...res.data[key],\n                        id: key\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch(err => {\n                dispatch(fetchOrdersFail(err));\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}