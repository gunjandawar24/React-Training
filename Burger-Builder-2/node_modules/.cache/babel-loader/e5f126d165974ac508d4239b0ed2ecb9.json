{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Orders/Orders.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst orders = props => {\n  useEffect(() => {\n    props.onFetchOrders(props.token, props.userId);\n  }, []);\n  let orders = /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }\n  });\n\n  if (!props.loading) {\n    orders = props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n      key: order.id,\n      ingredients: order.ingredients,\n      price: order.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }, orders);\n};\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(orders, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Orders/Orders.js"],"names":["React","useEffect","connect","Order","axios","withErrorHandler","actions","Spinner","orders","props","onFetchOrders","token","userId","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACtBR,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,CAACC,aAAN,CAAoBD,KAAK,CAACE,KAA1B,EAAiCF,KAAK,CAACG,MAAvC;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIJ,MAAM,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAb;;AACA,MAAI,CAACC,KAAK,CAACI,OAAX,EAAoB;AAClBL,IAAAA,MAAM,GAAGC,KAAK,CAACD,MAAN,CAAaM,GAAb,CAAiBC,KAAK,iBAC7B,oBAAC,KAAD;AACE,MAAA,GAAG,EAAEA,KAAK,CAACC,EADb;AAEE,MAAA,WAAW,EAAED,KAAK,CAACE,WAFrB;AAGE,MAAA,KAAK,EAAEF,KAAK,CAACG,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CAAT;AAOD;;AACD,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMV,MAAN,CAAP;AACD,CAhBD;;AAkBA,MAAMW,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLZ,IAAAA,MAAM,EAAEY,KAAK,CAACL,KAAN,CAAYP,MADf;AAELK,IAAAA,OAAO,EAAEO,KAAK,CAACL,KAAN,CAAYF,OAFhB;AAGLF,IAAAA,KAAK,EAAES,KAAK,CAACC,IAAN,CAAWV,KAHb;AAILC,IAAAA,MAAM,EAAEQ,KAAK,CAACC,IAAN,CAAWT;AAJd,GAAP;AAMD,CAPD;;AASA,MAAMU,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLb,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAQC,MAAR,KACbW,QAAQ,CAACjB,OAAO,CAACkB,WAAR,CAAoBb,KAApB,EAA2BC,MAA3B,CAAD;AAFL,GAAP;AAID,CALD;;AAOA,eAAeV,OAAO,CACpBiB,eADoB,EAEpBG,kBAFoB,CAAP,CAGbjB,gBAAgB,CAACG,MAAD,EAASJ,KAAT,CAHH,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst orders = props => {\n  useEffect(() => {\n    props.onFetchOrders(props.token, props.userId);\n  }, []);\n\n  let orders = <Spinner />;\n  if (!props.loading) {\n    orders = props.orders.map(order => (\n      <Order\n        key={order.id}\n        ingredients={order.ingredients}\n        price={order.price}\n      />\n    ));\n  }\n  return <div>{orders}</div>;\n};\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) =>\n      dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withErrorHandler(orders, axios));"]},"metadata":{},"sourceType":"module"}