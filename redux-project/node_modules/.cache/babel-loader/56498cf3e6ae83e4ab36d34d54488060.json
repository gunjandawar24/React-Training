{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/redux-project/src/containers/Counter/Counter.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { increment, decrement, add, subtract, storeResult } from '../../store/actions/actions';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput'; //now this component recieves state from redux.\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: 0\n    };\n\n    this.counterChangedHandler = (action, value) => {\n      switch (action) {\n        case 'inc':\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter + 1\n            };\n          });\n          break;\n\n        case 'dec':\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - 1\n            };\n          });\n          break;\n\n        case 'add':\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter + value\n            };\n          });\n          break;\n\n        case 'sub':\n          this.setState(prevState => {\n            return {\n              counter: prevState.counter - value\n            };\n          });\n          break;\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CounterOutput, {\n      value: this.props.ctr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CounterControl, {\n      label: \"Increment\",\n      clicked: this.props.onIncrementCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CounterControl, {\n      label: \"Decrement\",\n      clicked: this.props.onDecrementCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CounterControl, {\n      label: \"Add 5\",\n      clicked: this.props.onAddCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(CounterControl, {\n      label: \"Subtract 5\",\n      clicked: this.props.onSubtractCounter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.props.onStoreResult(this.props.ctr),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, \"Store Result\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }\n    }, this.props.storedResults.map(strResult => /*#__PURE__*/React.createElement(\"li\", {\n      key: strResult.id,\n      onClick: () => this.props.onDeleteResult(strResult.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }\n    }, strResult.value))));\n  }\n\n} //here state is the state stored in the redux(ie in reducer.js)\n//Here ctr and res are reducers. \n\n\nconst mapStateToProps = state => {\n  return {\n    ctr: state.ctr.counter,\n    storedResults: state.res.results\n  };\n}; //actions to dispatch:\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter: () => dispatch(increment()),\n    onDecrementCounter: () => dispatch(decrement()),\n    onAddCounter: () => dispatch(add(5)),\n    onSubtractCounter: () => dispatch(subtract(5)),\n    onStoreResult: result => dispatch(storeResult(result)),\n    onDeleteResult: id => dispatch({\n      type: actionTypes.DELETE_RESULT,\n      resultElId: id\n    })\n  };\n}; //this connect() takes states used in this container and actions that i want to dispatch.\n//if you dont have state then yoy pass null as first argument.\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);","map":{"version":3,"sources":["/home/gunjan/Desktop/redux-project/src/containers/Counter/Counter.js"],"names":["React","Component","connect","increment","decrement","add","subtract","storeResult","CounterControl","CounterOutput","Counter","state","counter","counterChangedHandler","action","value","setState","prevState","render","props","ctr","onIncrementCounter","onDecrementCounter","onAddCounter","onSubtractCounter","onStoreResult","storedResults","map","strResult","id","onDeleteResult","mapStateToProps","res","results","mapDispatchToProps","dispatch","result","type","actionTypes","DELETE_RESULT","resultElId"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { increment, decrement, add, subtract, storeResult } from '../../store/actions/actions';\nimport CounterControl from '../../components/CounterControl/CounterControl';\nimport CounterOutput from '../../components/CounterOutput/CounterOutput';\n\n//now this component recieves state from redux.\nclass Counter extends Component {\n    state = {\n        counter: 0\n    }\n\n    counterChangedHandler = ( action, value ) => {\n        switch ( action ) {\n            case 'inc':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + 1 } } )\n                break;\n            case 'dec':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - 1 } } )\n                break;\n            case 'add':\n                this.setState( ( prevState ) => { return { counter: prevState.counter + value } } )\n                break;\n            case 'sub':\n                this.setState( ( prevState ) => { return { counter: prevState.counter - value } } )\n                break;\n        }\n    }\n\n    render () {\n        return (\n            <div>\n                <CounterOutput value={this.props.ctr} />\n                <CounterControl label=\"Increment\" clicked={this.props.onIncrementCounter} />\n                <CounterControl label=\"Decrement\" clicked={this.props.onDecrementCounter}  />\n                <CounterControl label=\"Add 5\" clicked={this.props.onAddCounter}  />\n                <CounterControl label=\"Subtract 5\" clicked={this.props.onSubtractCounter}  />\n                <hr/>\n                <button onClick={() => this.props.onStoreResult(this.props.ctr)}>Store Result</button>\n                <ul>\n                    {this.props.storedResults.map(strResult => (\n                         <li key={strResult.id} onClick={() => this.props.onDeleteResult(strResult.id)}>{strResult.value}</li>\n                    ))}\n                   \n                </ul>\n            </div>\n        );\n    }\n}\n\n//here state is the state stored in the redux(ie in reducer.js)\n//Here ctr and res are reducers. \nconst mapStateToProps = state => {\n    return {\n        ctr: state.ctr.counter,\n        storedResults:state.res.results\n    };\n};\n\n//actions to dispatch:\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIncrementCounter: () => dispatch(increment()),\n        onDecrementCounter: () => dispatch(decrement()),\n        onAddCounter:       () => dispatch(add(5)),\n        onSubtractCounter:  () => dispatch(subtract(5)),\n        onStoreResult:      (result) => dispatch(storeResult(result)),\n        onDeleteResult:     (id) => dispatch({type: actionTypes.DELETE_RESULT,resultElId:id}),\n    }; \n}\n\n//this connect() takes states used in this container and actions that i want to dispatch.\n//if you dont have state then yoy pass null as first argument.\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"]},"metadata":{},"sourceType":"module"}