{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Modal from '../../components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.6,\n  meat: 1.5,\n  bacon: 1\n};\n\nclass BurgerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ingredients: {\n        cheese: 0,\n        meat: 0,\n        salad: 0,\n        bacon: 0\n      },\n      totalPrice: 4,\n      purchasable: false,\n      purchasing: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(igKey => {\n        return ingredients[igKey];\n      }).reduce((sum, elt) => {\n        return sum + elt;\n      }, 0);\n      this.setState({\n        purchasable: sum > 0\n      });\n    };\n\n    this.addIngredientsHandler = type => {\n      const oldCount = this.state.ingredients[type];\n      const updatedCount = oldCount + 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceAddition = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice + priceAddition;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.removeIngredientsHandler = type => {\n      const oldCount = this.state.ingredients[type];\n\n      if (oldCount <= 0) {\n        return;\n      }\n\n      const updatedCount = oldCount - 1;\n      const updatedIngredients = { ...this.state.ingredients\n      };\n      updatedIngredients[type] = updatedCount;\n      const priceDeduction = INGREDIENT_PRICES[type];\n      const oldPrice = this.state.totalPrice;\n      const newPrice = oldPrice - priceDeduction;\n      this.setState({\n        totalPrice: newPrice,\n        ingredients: updatedIngredients\n      });\n      this.updatePurchaseState(updatedIngredients);\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        purchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        purchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      const order = {\n        ingredients: this.state.ingredients,\n        //recalculate the price on server (in real App)\n        price: this.state.totalPrice,\n        //dummy data (later can send using a form)\n        customer: {\n          name: 'Gunjan',\n          address: {\n            street: 'Sreet1',\n            zipcode: '110009',\n            country: 'India'\n          },\n          email: 'gunjan.dawar@tothenew.com'\n        },\n        deliveryMethod: 'fastest'\n      }; // alert('You can Continue...!')\n\n      axios.post('/orders.json', order);\n    };\n  }\n\n  render() {\n    //tell which button should be enabled or disabled. \n    const disabledInfo = { ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    } //{salad:true,meat:false,...} and if its true then it is disabled.\n\n\n    return /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.purchasing,\n      modalClosed: this.purchaseCancelHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(OrderSummary, {\n      ingredients: this.state.ingredients,\n      orderCancelled: this.purchaseCancelHandler,\n      orderContinue: this.purchaseContinueHandler,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Burger, {\n      ingredients: this.state.ingredients,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(BurgerControls, {\n      ingredientsAdd: this.addIngredientsHandler,\n      ingredientsRemove: this.removeIngredientsHandler,\n      disabled: disabledInfo,\n      purchasable: this.state.purchasable,\n      displayOrder: this.purchaseHandler,\n      price: this.state.totalPrice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default BurgerBuilder;","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","Component","Aux","Burger","BurgerControls","OrderSummary","Modal","axios","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurgerBuilder","state","ingredients","totalPrice","purchasable","purchasing","updatePurchaseState","sum","Object","keys","map","igKey","reduce","elt","setState","addIngredientsHandler","type","oldCount","updatedCount","updatedIngredients","priceAddition","oldPrice","newPrice","removeIngredientsHandler","priceDeduction","purchaseHandler","purchaseCancelHandler","purchaseContinueHandler","order","price","customer","name","address","street","zipcode","country","email","deliveryMethod","post","render","disabledInfo","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Modal from '../../components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\n\n\nconst INGREDIENT_PRICES={\n    salad:0.5,\n    cheese:0.6,\n    meat:1.5,\n    bacon:1\n}\n\nclass BurgerBuilder extends Component{\n    state={\n        ingredients:{\n            cheese:0,\n            meat:0,\n            salad:0,\n            bacon:0\n        },\n     totalPrice:4,    \n     purchasable:false,\n     purchasing:false\n       \n    }\n\n//I want array of values from ingredients objects and need to reduce it to a single value(Sum)\n//sum is constantly updated in reduce function by each element(value) of the the array\n//if sum>0 then set purchasable to true or else false.\nupdatePurchaseState=(ingredients)=>{\n    \n    const sum=Object.keys(ingredients)\n    .map(igKey=>{\n        return ingredients[igKey];\n    })\n    .reduce((sum,elt)=>{\n        return sum+elt;\n    },0);\n    this.setState({purchasable: sum>0})\n\n};\n\n\n\naddIngredientsHandler=(type)=>{\n    const oldCount=this.state.ingredients[type];\n    const updatedCount=oldCount+1;\n    const updatedIngredients={\n        ...this.state.ingredients\n    };\n    updatedIngredients[type]=updatedCount;\n    const priceAddition=INGREDIENT_PRICES[type];\n    const oldPrice=this.state.totalPrice;\n    const newPrice=oldPrice+priceAddition;\n    this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n\n}\n\nremoveIngredientsHandler=(type)=>{\n    const oldCount=this.state.ingredients[type];\n    if(oldCount<=0){\n        return;\n    }\n    const updatedCount=oldCount-1;\n    const updatedIngredients={\n        ...this.state.ingredients\n    };\n    updatedIngredients[type]=updatedCount;\n    const priceDeduction=INGREDIENT_PRICES[type];\n    const oldPrice=this.state.totalPrice;\n    const newPrice=oldPrice-priceDeduction;\n    this.setState({totalPrice:newPrice,ingredients:updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n\n}\n\npurchaseHandler=()=>{\n    this.setState({purchasing:true})\n}\n\npurchaseCancelHandler=()=>{\n    this.setState({purchasing:false})\n}\n\npurchaseContinueHandler=()=>{\n\n\n    const order ={\n        ingredients:this.state.ingredients,\n        //recalculate the price on server (in real App)\n        price:this.state.totalPrice,\n        //dummy data (later can send using a form)\n        customer:{\n            name:'Gunjan',\n            address:{\n                street:'Sreet1',\n                zipcode:'110009',\n                country:'India'\n            },\n            email:'gunjan.dawar@tothenew.com'\n        },\n        deliveryMethod:'fastest'\n    }\n    // alert('You can Continue...!')\n    axios.post('/orders.json',order)\n\n\n\n\n}\n    render(){\n        //tell which button should be enabled or disabled. \n        const disabledInfo={\n            ...this.state.ingredients\n        };\n        for(let key in disabledInfo){\n            disabledInfo[key]=disabledInfo[key]<=0\n        }\n        //{salad:true,meat:false,...} and if its true then it is disabled.\n        return(\n            <Aux>\n                {/*OrderSummary is re0rendending again agian bcz it uses setState (states that are changed),so to avoid this\n                if the model is you want to display then only order summary should be re-renderrd else not */}\n                <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelHandler}>\n                    <OrderSummary \n                        ingredients={this.state.ingredients}\n                        orderCancelled={this.purchaseCancelHandler}\n                        orderContinue={this.purchaseContinueHandler}\n                        price={this.state.totalPrice}/>\n                </Modal>\n                <Burger ingredients={this.state.ingredients}/>\n                <BurgerControls \n                    ingredientsAdd={this.addIngredientsHandler} \n                    ingredientsRemove={this.removeIngredientsHandler}\n                    disabled={disabledInfo}\n                    purchasable={this.state.purchasable}\n                    displayOrder={this.purchaseHandler}\n                    price={this.state.totalPrice}/>\n            </Aux>    \n        );\n    }\n\n\n}\n\nexport default BurgerBuilder;\n\n\n"]},"metadata":{},"sourceType":"module"}