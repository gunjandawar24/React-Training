{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\nconst initialState = {\n  results: []\n};\n\nconst deleteResult = (state, action) => {\n  /*here it checks every elt id of array with the one to delete,if does not matches \n  *then create a new array with those elements and leave which matches that given condition*/\n  const updatedArray = state.results.filter(result => result.id !== action.resultElId);\n  return updateObject(state, {\n    results: updatedArray\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    //change data----\n    case actionTypes.STORE_RESULT:\n      /* You cannot do this in reducer file */\n      // setTimeout(()=> {\n      //     return {\n      //           new state...\n      //     }\n      // },2000);\n      return updateObject(state, {\n        results: state.results.concat({\n          id: new Date(),\n          value: action.result * 2\n        })\n      });\n\n    case actionTypes.DELETE_RESULT:\n      //****One Way  to immutably changing the results***\n      //but it does not do deep cloning.\n      // const id=2;\n      // const newArray=[...state.results];\n      // newArray.splice(id,1);\n      //this will mutate our original state\n      // state.results.splice(id,1);\n      return deleteResult(state, action);\n  } //it returns thr current  state.\n\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/gunjan/Desktop/redux-project/src/store/reducers/result.js"],"names":["actionTypes","updateObject","initialState","results","deleteResult","state","action","updatedArray","filter","result","id","resultElId","reducer","type","STORE_RESULT","concat","Date","value","DELETE_RESULT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC;AADS,CAArB;;AAKA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AACnC;;AAEA,QAAMC,YAAY,GAACF,KAAK,CAACF,OAAN,CAAcK,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcJ,MAAM,CAACK,UAApD,CAAnB;AACA,SAAOV,YAAY,CAACI,KAAD,EAAO;AAACF,IAAAA,OAAO,EAACI;AAAT,GAAP,CAAnB;AACH,CALD;;AAOA,MAAMK,OAAO,GAAG,CAACP,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAE9C,UAAOA,MAAM,CAACO,IAAd;AAEI;AACA,SAAKb,WAAW,CAACc,YAAjB;AAEI;AACA;AACA;AACA;AACA;AACA;AAEA,aAAOb,YAAY,CAACI,KAAD,EAAO;AAACF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,CAAcY,MAAd,CAAqB;AAACL,UAAAA,EAAE,EAAC,IAAIM,IAAJ,EAAJ;AAAgBC,UAAAA,KAAK,EAACX,MAAM,CAACG,MAAP,GAAc;AAApC,SAArB;AAAT,OAAP,CAAnB;;AAGJ,SAAKT,WAAW,CAACkB,aAAjB;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,aAAOd,YAAY,CAACC,KAAD,EAAOC,MAAP,CAAnB;AAzBR,GAF8C,CA8B9C;;;AACA,SAAOD,KAAP;AACH,CAhCD;;AAkCA,eAAeO,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    results:[]\n}\n\n\nconst deleteResult = (state,action) => {\n    /*here it checks every elt id of array with the one to delete,if does not matches \n    *then create a new array with those elements and leave which matches that given condition*/       \n    const updatedArray=state.results.filter(result => result.id !== action.resultElId);\n    return updateObject(state,{results:updatedArray});\n}\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type){\n     \n        //change data----\n        case actionTypes.STORE_RESULT :\n\n            /* You cannot do this in reducer file */\n            // setTimeout(()=> {\n            //     return {\n            //           new state...\n            //     }\n            // },2000);\n\n            return updateObject(state,{results:state.results.concat({id:new Date() ,value:action.result*2})})\n           \n        \n        case actionTypes.DELETE_RESULT :\n            //****One Way  to immutably changing the results***\n            //but it does not do deep cloning.\n            // const id=2;\n            // const newArray=[...state.results];\n            // newArray.splice(id,1);\n\n            //this will mutate our original state\n            // state.results.splice(id,1);\n\n            return deleteResult(state,action);\n               \n    }\n    //it returns thr current  state.\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}