{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Auth/Auth.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nconst Auth = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }); //we should be in sign up mode initially.\n\n  const [isSignup, setIsSignup] = useState(true);\n  const {\n    buildingBurger,\n    authRedirectPath,\n    onSetAuthRedirectPath\n  } = props; //if we are not building the burger and we are trying to reach to checkout.\n  //then take me to the '/' page from '/auth' page.\n\n  useEffect(() => {\n    if (!buildingBurger && authRedirectPath !== '/') {\n      onSetAuthRedirectPath();\n    }\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = updateObject(authForm, {\n      [controlName]: updateObject(authForm[controlName], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      })\n    });\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  }; //converting state object into array\n\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  } //now i'll loop through the array and create a form using jsx <Input />\n\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 20\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, props.error);\n  } //after authentication redirect to either checkout page or to the home('/') page.\n\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 28\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    clicked: switchAuthModeHandler,\n    btnType: \"Danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"SWITCH TO \", isSignup ? 'SIGNIN' : 'SIGNUP'));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Auth/Auth.js"],"names":["React","Component","useEffect","useState","Input","Button","classes","actions","Spinner","connect","Redirect","updateObject","checkValidity","Auth","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","setIsSignup","buildingBurger","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","switchAuthModeHandler","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","authRedirect","isAuthenticated","mapStateToProps","state","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","isSignUp","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React , { Component, useEffect, useState } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject ,checkValidity } from '../../shared/utility';\n\nconst Auth = props => {\n\n   const [authForm,setAuthForm] = useState({\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail:true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            }\n        })\n        \n        //we should be in sign up mode initially.\n        const [isSignup,setIsSignup] = useState(true);\n    \n\n     const {buildingBurger,authRedirectPath,onSetAuthRedirectPath} = props;   \n    //if we are not building the burger and we are trying to reach to checkout.\n    //then take me to the '/' page from '/auth' page.\n    useEffect(() => {\n        if(!buildingBurger && authRedirectPath !== '/'){\n            onSetAuthRedirectPath();\n        }\n    },[buildingBurger,authRedirectPath,onSetAuthRedirectPath])\n\n    const inputChangedHandler = ( event, controlName ) => {\n        const updatedControls = updateObject( authForm, {\n            [controlName]: updateObject( authForm[controlName], {\n                value: event.target.value,\n                valid: checkValidity( event.target.value, authForm[controlName].validation ),\n                touched: true\n            } )\n        } );\n        setAuthForm(updatedControls);\n    }\n\n   const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(authForm.email.value,authForm.password.value,isSignup);\n    }\n\n   const switchAuthModeHandler = () => {\n        setIsSignup(!isSignup);\n    }\n\n        //converting state object into array\n        const formElementsArray = [];\n        for (let key in authForm) {\n            formElementsArray.push({\n                id: key,\n                config: authForm[key]\n            });\n        }\n\n        //now i'll loop through the array and create a form using jsx <Input />\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if(props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage =null;\n        if(props.error){\n            errorMessage = (\n            <p>{props.error}</p>\n            );\n        }\n        \n        //after authentication redirect to either checkout page or to the home('/') page.\n        let authRedirect = null ;\n        if(props.isAuthenticated){\n            authRedirect = <Redirect to={props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {isSignup ? 'SIGNIN' : 'SIGNUP' }</Button>\n            </div>\n        );\n    }\n\nconst mapStateToProps = state => {\n\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath : state.auth.authRedirectPath\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email,password,isSignUp) => dispatch(actions.auth(email,password,isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}