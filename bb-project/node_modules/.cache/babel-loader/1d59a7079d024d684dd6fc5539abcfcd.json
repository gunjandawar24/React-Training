{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\ninitialState = {\n  orders: [],\n  //loading is set to true when we start fetching the burger\n  loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.PURCHASE_BURGER_START:\n      return { ...state,\n        loading: true\n      };\n\n    case actionTypes.PURCHASE_BURGER_SUCCESS:\n      const newOrder = { ...action.orderData,\n        id: action.orderId\n      };\n      return { ...state,\n        //because i am done with my order.\n        loading: false,\n        orders: state.orders.concat(newOrder)\n      };\n\n    case actionTypes.PURCHASE_BURGER_FAIL:\n      return { ...state,\n        //false bcz even if we fail then also we are done.\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/store/reducers/order.js"],"names":["actionTypes","initialState","orders","loading","reducer","state","action","type","PURCHASE_BURGER_START","PURCHASE_BURGER_SUCCESS","newOrder","orderData","id","orderId","concat","PURCHASE_BURGER_FAIL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEAC,YAAY,GAAG;AACXC,EAAAA,MAAM,EAAC,EADI;AAEX;AACAC,EAAAA,OAAO,EAAC;AAHG,CAAf;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACJ,YAAP,EAAoBK,MAApB,KAA+B;AAC3C,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKP,WAAW,CAACQ,qBAAjB;AACI,aAAM,EACF,GAAGH,KADD;AAEFF,QAAAA,OAAO,EAAC;AAFN,OAAN;;AAKJ,SAAKH,WAAW,CAACS,uBAAjB;AACI,YAAMC,QAAQ,GAAG,EACb,GAAGJ,MAAM,CAACK,SADG;AAEbC,QAAAA,EAAE,EAACN,MAAM,CAACO;AAFG,OAAjB;AAIA,aAAM,EACF,GAAGR,KADD;AAEF;AACAF,QAAAA,OAAO,EAAC,KAHN;AAIFD,QAAAA,MAAM,EAACG,KAAK,CAACH,MAAN,CAAaY,MAAb,CAAoBJ,QAApB;AAJL,OAAN;;AAOJ,SAAKV,WAAW,CAACe,oBAAjB;AACI,aAAM,EACF,GAAGV,KADD;AAEF;AACAF,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAOJ;AACI,aAAOE,KAAP;AA7BR;AA+BH,CAhCD;;AAkCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\ninitialState = {\n    orders:[],\n    //loading is set to true when we start fetching the burger\n    loading:false\n}\n\nconst reducer = (state=initialState,action) => {\n    switch(action.type){\n\n        case actionTypes.PURCHASE_BURGER_START:\n            return{\n                ...state,\n                loading:true\n            }\n\n        case actionTypes.PURCHASE_BURGER_SUCCESS:\n            const newOrder = {\n                ...action.orderData,\n                id:action.orderId\n            }\n            return{\n                ...state,\n                //because i am done with my order.\n                loading:false,\n                orders:state.orders.concat(newOrder)\n            }\n\n        case actionTypes.PURCHASE_BURGER_FAIL:\n            return{\n                ...state,\n                //false bcz even if we fail then also we are done.\n                loading:false\n\n            }  \n\n        default:\n            return state;       \n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}