{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/hoc/withErrorHandler/withErrorHandler.js\";\n//i am using (with) becoz will be used with export not like <Aux> /jsx element\nimport React, { Component } from 'react';\nimport Aux from '../Aux/Aux';\nimport Modal from '../../components/UI/Modal/Modal'; //we will wrap burger builder component hre \n\nconst withErrorHandler = (WrappedComponent, axios) => {\n  var _temp;\n\n  return _temp = class extends Component {\n    //automatically generate error like network error..\n\n    /*i want this code to get executed as soon as components is \n    created bcz it can check if igredients are nulll or not if yes then generate network error.*/\n    //so this can be done using constructor or componentwillmount not with componentdidmount bcz it get executed at last\n    //i want this to be called before child components are renderd \n    //if we add/wrap this hoc with other components then this constructor is called again again again so need to unmount \n    constructor() {\n      super();\n      this.state = {\n        error: null\n      };\n\n      this.errorConfirmedHandler = () => {\n        this.setState({\n          error: null\n        });\n      };\n\n      this.reqInterceptor = axios.interceptors.request.use(req => {\n        this.setState({\n          error: null\n        });\n        return req;\n      });\n      this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n        this.setState({\n          error: error\n        });\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.reqInterceptor);\n      axios.interceptors.response.eject(this.resInterceptor);\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(Aux, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal, {\n        show: this.state.error,\n        modalClosed: this.errorConfirmedHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, this.state.error ? this.state.error.message : null), /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      })));\n    }\n\n  }, _temp;\n};\n\nexport default withErrorHandler;","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/hoc/withErrorHandler/withErrorHandler.js"],"names":["React","Component","Aux","Modal","withErrorHandler","WrappedComponent","axios","constructor","state","error","errorConfirmedHandler","setState","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","componentWillUnmount","eject","render","message","props"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,iCAAlB,C,CAEA;;AACA,MAAMC,gBAAgB,GAAG,CAAEC,gBAAF,EAAoBC,KAApB,KAA+B;AAAA;;AACpD,iBAAO,cAAcL,SAAd,CAAwB;AAK3B;;AACA;;AAEA;AACA;AACA;AACAM,IAAAA,WAAW,GAAI;AACX;AADW,WAVfC,KAUe,GAVP;AACJC,QAAAA,KAAK,EAAE;AADH,OAUO;;AAAA,WAgBfC,qBAhBe,GAgBS,MAAM;AAC1B,aAAKC,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAd;AACH,OAlBc;;AAEX,WAAKG,cAAL,GAAsBN,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BC,GAAG,IAAI;AACxD,aAAKL,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAE;AAAR,SAAd;AACA,eAAOO,GAAP;AACH,OAHqB,CAAtB;AAIA,WAAKC,cAAL,GAAsBX,KAAK,CAACO,YAAN,CAAmBK,QAAnB,CAA4BH,GAA5B,CAAgCI,GAAG,IAAIA,GAAvC,EAA4CV,KAAK,IAAI;AACvE,aAAKE,QAAL,CAAc;AAACF,UAAAA,KAAK,EAAEA;AAAR,SAAd;AACH,OAFqB,CAAtB;AAGC;;AAEDW,IAAAA,oBAAoB,GAAG;AACnBd,MAAAA,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,cAAtC;AACAN,MAAAA,KAAK,CAACO,YAAN,CAAmBK,QAAnB,CAA4BG,KAA5B,CAAkC,KAAKJ,cAAvC;AACH;;AAMLK,IAAAA,MAAM,GAAI;AACN,0BACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAE,KAAKd,KAAL,CAAWC,KADrB;AAEI,QAAA,WAAW,EAAE,KAAKC,qBAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGK,KAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKD,KAAL,CAAWC,KAAX,CAAiBc,OAApC,GAA8C,IAHnD,CADJ,eAMI,oBAAC,gBAAD,oBAAsB,KAAKC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SANJ,CADJ;AAUH;;AA1C0B,GAA/B;AA4CH,CA7CD;;AA+CA,eAAepB,gBAAf","sourcesContent":["//i am using (with) becoz will be used with export not like <Aux> /jsx element\nimport React,{Component} from 'react';\nimport Aux from '../Aux/Aux';\nimport Modal from '../../components/UI/Modal/Modal';\n\n//we will wrap burger builder component hre \nconst withErrorHandler = ( WrappedComponent, axios ) => {\n    return class extends Component {\n        state = {\n            error: null\n        }\n\n        //automatically generate error like network error..\n        /*i want this code to get executed as soon as components is \n        created bcz it can check if igredients are nulll or not if yes then generate network error.*/\n        //so this can be done using constructor or componentwillmount not with componentdidmount bcz it get executed at last\n        //i want this to be called before child components are renderd \n        //if we add/wrap this hoc with other components then this constructor is called again again again so need to unmount \n        constructor () {\n            super();\n            this.reqInterceptor = axios.interceptors.request.use(req => {\n                this.setState({error: null});\n                return req;\n            });\n            this.resInterceptor = axios.interceptors.response.use(res => res, error => {\n                this.setState({error: error});\n            });\n            }\n    \n            componentWillUnmount() {\n                axios.interceptors.request.eject(this.reqInterceptor);\n                axios.interceptors.response.eject(this.resInterceptor);\n            }\n\n        errorConfirmedHandler = () => {\n            this.setState({error: null});\n        }\n\n        render () {\n            return (\n                <Aux>\n                    <Modal \n                        show={this.state.error}\n                        modalClosed={this.errorConfirmedHandler}>\n                        {this.state.error ? this.state.error.message : null}\n                    </Modal>\n                    <WrappedComponent {...this.props} />\n                </Aux>\n            );\n        }\n    }\n}\n\nexport default withErrorHandler;"]},"metadata":{},"sourceType":"module"}