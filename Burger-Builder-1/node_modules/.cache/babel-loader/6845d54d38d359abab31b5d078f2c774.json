{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/Orders/Orders.js\";\nimport React, { Component } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n  componentDidMount() {\n    this.props.onFetchOrders(this.props.token, this.props.userId);\n  }\n\n  render() {\n    let orders = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 22\n      }\n    });\n\n    if (!this.props.loading) {\n      orders = this.props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n        key: order.id,\n        ingredients: order.ingredients,\n        price: order.price,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }\n      }));\n    }\n\n    return orders;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/Orders/Orders.js"],"names":["React","Component","Order","axios","withErrorHandler","actions","connect","Spinner","Orders","componentDidMount","props","onFetchOrders","token","userId","render","orders","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAN,SAAqBP,SAArB,CAA+B;AAE3BQ,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWC,aAAX,CAAyB,KAAKD,KAAL,CAAWE,KAApC,EAA0C,KAAKF,KAAL,CAAWG,MAArD;AACH;;AAEDC,EAAAA,MAAM,GAAI;AACN,QAAIC,MAAM,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;;AACA,QAAG,CAAC,KAAKL,KAAL,CAAWM,OAAf,EAAwB;AACpBD,MAAAA,MAAM,GACF,KAAKL,KAAL,CAAWK,MAAX,CAAkBE,GAAlB,CAAsBC,KAAK,iBACvB,oBAAC,KAAD;AACI,QAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,QAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,QAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAOH;;AACD,WAAON,MAAP;AACH;;AAlB0B;;AAqB/B,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAE/B,SAAM;AACFR,IAAAA,MAAM,EAACQ,KAAK,CAACL,KAAN,CAAYH,MADjB;AAEFC,IAAAA,OAAO,EAACO,KAAK,CAACL,KAAN,CAAYF,OAFlB;AAGFJ,IAAAA,KAAK,EAACW,KAAK,CAACC,IAAN,CAAWZ,KAHf;AAIFC,IAAAA,MAAM,EAACU,KAAK,CAACC,IAAN,CAAWX;AAJhB,GAAN;AAMH,CARD;;AAUA,MAAMY,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHf,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkBa,QAAQ,CAACrB,OAAO,CAACsB,WAAR,CAAoBf,KAApB,EAA0BC,MAA1B,CAAD;AADtC,GAAP;AAGH,CAJD;;AAMA,eAAeP,OAAO,CAACgB,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CrB,gBAAgB,CAACI,MAAD,EAASL,KAAT,CAA5D,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport {connect} from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nclass Orders extends Component {\n \n    componentDidMount() {\n        this.props.onFetchOrders(this.props.token,this.props.userId);\n    }\n\n    render () {\n        let orders = <Spinner  />;\n        if(!this.props.loading) {\n            orders = \n                this.props.orders.map(order => (\n                    <Order \n                        key={order.id}\n                        ingredients={order.ingredients}\n                        price={order.price} />\n                ))\n        }\n        return orders;\n    }\n}\n\nconst mapStateToProps = (state) => {\n    \n    return{\n        orders:state.order.orders,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token,userId))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders, axios));"]},"metadata":{},"sourceType":"module"}