{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/redux-project/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nconst rootReducer = combineReducers({\n  ctr: counterReducer,\n  res: resultReducer\n});\n/* middleware which simply logs each action we issue.\n*here it executes 3 functions-\n* 2)next depicts let the action continue its journey to the reducer.\n* 1)this middleware is get executed by the store.\n* 3)recives action you dispatch as input.\n*/\n\nconst logger = store => {\n  return next => {\n    return action => {\n      console.log('[Middleware] Dispatching', action);\n      const result = next(action);\n      console.log('[Middleware] next state ', store.getState());\n      return result;\n    };\n  };\n}; //to connect browser extension to the store running in our js code.\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(logger))); //now store is connected to our react-app\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 6\n  }\n}))), document.getElementById('root')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/gunjan/Desktop/redux-project/src/index.js"],"names":["React","ReactDOM","App","createStore","combineReducers","applyMiddleware","compose","counterReducer","resultReducer","Provider","serviceWorker","rootReducer","ctr","res","logger","store","next","action","console","log","result","getState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAsCC,eAAtC,EAAsDC,OAAtD,QAAqE,OAArE;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,MAAMC,WAAW,GAAIP,eAAe,CAAC;AACnCQ,EAAAA,GAAG,EAACL,cAD+B;AAEnCM,EAAAA,GAAG,EAACL;AAF+B,CAAD,CAApC;AAKA;;;;;;;AAMA,MAAMM,MAAM,GAAGC,KAAK,IAAI;AACtB,SAAOC,IAAI,IAAG;AACZ,WAAOC,MAAM,IAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCF,MAAvC;AACA,YAAMG,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAuCJ,KAAK,CAACM,QAAN,EAAvC;AACA,aAAOD,MAAP;AACH,KALD;AAMD,GAPD;AAQD,CATD,C,CAWA;;;AACA,MAAME,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+ClB,OAAxE;AACA,MAAMS,KAAK,GAACZ,WAAW,CAACQ,WAAD,EAAaW,gBAAgB,CAACjB,eAAe,CAACS,MAAD,CAAhB,CAA7B,CAAvB,C,CAEA;;AACAb,QAAQ,CAACwB,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEV,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADF,CADF,EAMEW,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createStore ,combineReducers,applyMiddleware,compose } from 'redux';\nimport counterReducer from './store/reducers/counter';\nimport resultReducer from './store/reducers/result';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer  = combineReducers({\n  ctr:counterReducer,\n  res:resultReducer\n});\n\n/* middleware which simply logs each action we issue.\n*here it executes 3 functions-\n* 2)next depicts let the action continue its journey to the reducer.\n* 1)this middleware is get executed by the store.\n* 3)recives action you dispatch as input.\n*/\nconst logger = store => {\n  return next =>{\n    return action => {\n        console.log('[Middleware] Dispatching',action);\n        const result = next(action);\n        console.log('[Middleware] next state ',store.getState());\n        return result;\n    }\n  }\n};\n\n//to connect browser extension to the store running in our js code.\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store=createStore(rootReducer,composeEnhancers(applyMiddleware(logger)));\n\n//now store is connected to our react-app\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n     <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}