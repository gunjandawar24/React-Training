{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      //avoid reloading the page(does not make a new request.)\n      event.preventDefault(); // console.log(this.props.ingredients);\n      // this.setState({ loading:true });\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ings,\n        //recalculate the price on server (in real App)\n        price: this.props.price,\n        orderData: formData\n      };\n      this.props.onOrderBurger(order); // axios.post('/orders.json',order)\n      // .then(response => {\n      //     this.setState({ loading:false});\n      //     //will take me back to home page after clicking order.\n      //     this.props.history.push('/');\n      //     // console.log(response)\n      // })\n      // .catch(error =>{\n      //     //  console.log(error));\n      //      this.setState({ loading:false});\n      // });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      }; //Example-email\n\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      }; //Setting its value\n\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    //convert orderForm object into array so that i can loop through.\n    // i am pushing object into an array..\n    //id:key -> name,street..\n    //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, \"Order\"));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }\n    }, \"Enter Your Contact Details : \"), form);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: orderData => dispatch(actions.purchaseBurger(orderData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","connect","Button","classes","Spinner","axios","Input","withErrorHandler","actions","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","onOrderBurger","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidity","setState","rules","isValid","trim","length","pattern","test","render","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","burgerBuilder","totalPrice","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders'\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n    }\n\n    orderHandler = (event) => {\n        //avoid reloading the page(does not make a new request.)\n        event.preventDefault();\n        // console.log(this.props.ingredients);\n \n        // this.setState({ loading:true });\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order ={\n        ingredients:this.props.ings,\n        //recalculate the price on server (in real App)\n        price:this.props.price,\n        orderData: formData\n    }\n\n    this.props.onOrderBurger(order);\n\n    // axios.post('/orders.json',order)\n    // .then(response => {\n    //     this.setState({ loading:false});\n    //     //will take me back to home page after clicking order.\n    //     this.props.history.push('/');\n    //     // console.log(response)\n    // })\n    // .catch(error =>{\n    //     //  console.log(error));\n    //      this.setState({ loading:false});\n    // });\n            \n}\n\n    //here i want to clone deeply.(bcoz order object has nested objects \n    // and when we mutate using setState it will change original data.)\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        //Example-email\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        //Setting its value\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    render(){\n\n        //convert orderForm object into array so that i can loop through.\n        // i am pushing object into an array..\n        //id:key -> name,street..\n        //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = ( \n        <form onSubmit={this.orderHandler}>\n            {/* <Input inputtype=\"input\"  type=\"text\" name=\"name\" placeholder=\"Your name\" /> */}\n            \n            {formElementsArray.map(formElement => (\n                    <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                \n                ))}\n\n            <Button btnType=\"Success\" disabled={!this.state.formIsValid}>Order</Button>\n        </form>\n);\n        if(this.props.loading){\n            form = <Spinner />\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Details : </h4>\n                {form}\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        loading:state.order.loading\n       \n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger : (orderData) => dispatch(actions.purchaseBurger(orderData))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));"]},"metadata":{},"sourceType":"module"}