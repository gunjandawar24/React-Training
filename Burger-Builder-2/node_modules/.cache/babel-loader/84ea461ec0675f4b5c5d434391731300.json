{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nconst ContactData = props => {\n  const [orderForm, setOrderform] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your Name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    deliveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          displayValue: 'Fastest'\n        }, {\n          value: 'cheapest',\n          displayValue: 'Cheapest'\n        }]\n      },\n      value: 'fastest',\n      validation: {},\n      valid: true\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const orderHandler = event => {\n    //avoid reloading the page(does not make a new request.)\n    event.preventDefault(); // console.log(this.props.ingredients);\n    // this.setState({ loading:true });\n\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: props.ings,\n      //recalculate the price on server (in real App)\n      price: props.price,\n      orderData: formData,\n      userId: props.userId\n    };\n    props.onOrderBurger(order, props.token); // axios.post('/orders.json',order)\n    // .then(response => {\n    //     this.setState({ loading:false});\n    //     //will take me back to home page after clicking order.\n    //     this.props.history.push('/');\n    //     // console.log(response)\n    // })\n    // .catch(error =>{\n    //     //  console.log(error));\n    //      this.setState({ loading:false});\n    // });\n  }; //here i want to clone deeply.(bcoz order object has nested objects \n  // and when we mutate using setState it will change original data.)\n\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    //Example-email\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n      //Setting its value\n      value: event.target.value,\n      valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    let formIsValid = true;\n\n    for (let inputIdentifier in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n    }\n\n    setOrderform(updatedOrderForm);\n    setFormIsValid(formIsValid);\n  }; //convert orderForm object into array so that i can loop through.\n  // i am pushing object into an array..\n  //id:key -> name,street..\n  //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n\n\n  const formElementsArray = [];\n\n  for (let key in orderForm) {\n    formElementsArray.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  let form = /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: orderHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    changed: event => inputChangedHandler(event, formElement.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    disabled: !formIsValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, \"Order\"));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 20\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.ContactData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, \"Enter Your Contact Details : \"), form);\n};\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","useState","connect","Button","classes","Spinner","axios","Input","withErrorHandler","actions","updateObject","checkValidity","ContactData","props","orderForm","setOrderform","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","formElementsArray","key","push","id","config","form","map","formElement","loading","mapStateToProps","state","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders'\nimport Input from '../../../components/UI/Input/Input';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject , checkValidity } from '../../../shared/utility';\n\nconst ContactData = props => {\n\n   const [orderForm,setOrderform] = useState({\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true\n            }\n        })\n        const [formIsValid,setFormIsValid] = useState(false);\n    \n\n    const orderHandler = (event) => {\n        //avoid reloading the page(does not make a new request.)\n        event.preventDefault();\n        // console.log(this.props.ingredients);\n \n        // this.setState({ loading:true });\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n        const order ={\n        ingredients:props.ings,\n        //recalculate the price on server (in real App)\n        price: props.price,\n        orderData: formData,\n        userId: props.userId\n    }\n\n    props.onOrderBurger(order,props.token);\n\n    // axios.post('/orders.json',order)\n    // .then(response => {\n    //     this.setState({ loading:false});\n    //     //will take me back to home page after clicking order.\n    //     this.props.history.push('/');\n    //     // console.log(response)\n    // })\n    // .catch(error =>{\n    //     //  console.log(error));\n    //      this.setState({ loading:false});\n    // });\n            \n}\n\n    //here i want to clone deeply.(bcoz order object has nested objects \n    // and when we mutate using setState it will change original data.)\n    const inputChangedHandler = (event, inputIdentifier) => {\n        \n         //Example-email\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n            //Setting its value\n            value: event.target.value,\n            valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n            touched: true\n        });\n        const updatedOrderForm = updateObject(orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n        \n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        setOrderform(updatedOrderForm);\n        setFormIsValid(formIsValid);\n    }\n\n\n        //convert orderForm object into array so that i can loop through.\n        // i am pushing object into an array..\n        //id:key -> name,street..\n        //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key]\n            });\n        }\n\n        let form = ( \n        <form onSubmit={orderHandler}>\n            {/* <Input inputtype=\"input\"  type=\"text\" name=\"name\" placeholder=\"Your name\" /> */}\n            \n            {formElementsArray.map(formElement => (\n                    <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    changed={(event) => inputChangedHandler(event, formElement.id)} />\n                \n                ))}\n\n            <Button btnType=\"Success\" disabled={!formIsValid}>Order</Button>\n        </form>\n);\n        if(props.loading){\n            form = <Spinner />\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Details : </h4>\n                {form}\n            </div>\n\n        );\n        }\n        \n\nconst mapStateToProps = state => {\n    return {\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n       \n    };\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger : (orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(ContactData,axios));"]},"metadata":{},"sourceType":"module"}