{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/BurgerBuilder/BurgerBuilder.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect, useDispatch, useSelector } from 'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Modal from '../../components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nexport const BurgerBuilder = props => {\n  const [purchasing, setPurchasing] = useState(false); //dispatches an action to a redux store.\n\n  const dispatch = useDispatch();\n  const ings = useSelector(state => {\n    return state.burgerBuilder.ingredients;\n  });\n  const price = useSelector(state => state.burgerBuilder.totalPrice);\n  const error = useSelector(state => state.burgerBuilder.error);\n  const isAuthenticated = useSelector(state => state.auth.token !== null);\n\n  const onIngredientAdded = ingName => dispatch(actions.addIngredient(ingName));\n\n  const onIngredientRemoved = ingName => dispatch(actions.removeIngredient(ingName));\n\n  const onInitIngredients = useCallback(() => dispatch(actions.initIngredients()), [dispatch]);\n\n  const onInitPurchase = () => dispatch(actions.purchaseInit());\n\n  const onSetAuthRedirectPath = path => dispatch(actions.setAuthRedirectPath(path)); // const onIngredientsAdded = (ingName) => dispatch(actions.addIngredient(ingName));\n  // const onIngredientsRemoved = (ingName) => dispatch(actions.removeIngredient(ingName));\n  // const onInitIngredients = () => dispatch(actions.initIngredients());\n  // const onInitPurchase= () => dispatch(actions.purchaseInit());\n  // const onSetAuthRedirectPath = (path) => dispatch(actions.setAuthRedirectPath(path));\n\n\n  useEffect(() => {\n    onInitIngredients();\n  }, [onInitIngredients]); //I want array of values from ingredients objects and need to reduce it to a single value(Sum)\n  //sum is constantly updated in reduce function by each element(value) of the the array\n  //if sum>0 then set purchasable to true or else false.\n  //now it returns either true or false.\n\n  const updatePurchaseState = ingredients => {\n    const sum = Object.keys(ingredients).map(igKey => {\n      return ingredients[igKey];\n    }).reduce((sum, elt) => {\n      return sum + elt;\n    }, 0);\n    return sum > 0;\n  };\n\n  const purchaseHandler = () => {\n    if (props.isAuthenticated) {\n      setPurchasing(true);\n    } else {\n      onSetAuthRedirectPath('/checkout');\n      props.history.push('/auth');\n    }\n  };\n\n  const purchaseCancelHandler = () => {\n    setPurchasing(false);\n  };\n\n  const purchaseContinueHandler = () => {\n    // // alert('You can Continue...!')\n    onInitPurchase();\n    props.history.push('/checkout');\n  }; //tell which button should be enabled or disabled. \n\n\n  const disabledInfo = { ...props.ings\n  };\n\n  for (let key in disabledInfo) {\n    disabledInfo[key] = disabledInfo[key] <= 0;\n  } //{salad:true,meat:false,...} and if its true then it is disabled.\n\n\n  let orderSummary = null; //will render spinner for a fraction of second when we load app for the first time..\n\n  let burger = props.error ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 36\n    }\n  }, \"Ingredients can't be loaded!\") : /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 74\n    }\n  });\n\n  if (props.ings) {\n    burger = /*#__PURE__*/React.createElement(Aux, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Burger, {\n      ingredients: props.ings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(BurgerControls, {\n      ingredientsAdd: onIngredientsAdded,\n      ingredientsRemove: onIngredientsRemoved,\n      disabled: disabledInfo,\n      purchasable: updatePurchaseState(props.ings),\n      displayOrder: purchaseHandler,\n      isAuth: props.isAuthenticated,\n      price: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }));\n    orderSummary = /*#__PURE__*/React.createElement(OrderSummary, {\n      ingredients: props.ings,\n      orderCancelled: purchaseCancelHandler,\n      orderContinue: purchaseContinueHandler,\n      price: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 26\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Aux, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    show: purchasing,\n    modalClosed: purchaseCancelHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, orderSummary), burger);\n};\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    error: state.burgerBuilder.error,\n    isAuthenticated: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientsAdded: ingName => dispatch(actions.addIngredient(ingName)),\n    onIngredientsRemoved: ingName => dispatch(actions.removeIngredient(ingName)),\n    onInitIngredients: () => dispatch(actions.initIngredients()),\n    onInitPurchase: () => dispatch(actions.purchaseInit()),\n    onSetAuthRedirectPath: path => dispatch(actions.setAuthRedirectPath(path))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurgerBuilder, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/BurgerBuilder/BurgerBuilder.js"],"names":["React","useState","useEffect","connect","useDispatch","useSelector","Aux","Burger","BurgerControls","OrderSummary","Modal","axios","Spinner","withErrorHandler","actions","BurgerBuilder","props","purchasing","setPurchasing","dispatch","ings","state","burgerBuilder","ingredients","price","totalPrice","error","isAuthenticated","auth","token","onIngredientAdded","ingName","addIngredient","onIngredientRemoved","removeIngredient","onInitIngredients","useCallback","initIngredients","onInitPurchase","purchaseInit","onSetAuthRedirectPath","path","setAuthRedirectPath","updatePurchaseState","sum","Object","keys","map","igKey","reduce","elt","purchaseHandler","history","push","purchaseCancelHandler","purchaseContinueHandler","disabledInfo","key","orderSummary","burger","onIngredientsAdded","onIngredientsRemoved","mapStateToProps","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect , useDispatch , useSelector } from 'react-redux';\nimport Aux from '../../hoc/Aux/Aux';\nimport Burger from '../../components/Burger/Burger';\nimport BurgerControls from '../../components/Burger/BuildControls/BuildControls';\nimport OrderSummary from '../../components/Burger/OrderSummary/OrderSummary';\nimport Modal from '../../components/UI/Modal/Modal';\nimport axios from '../../axios-orders';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\n\n\nexport const BurgerBuilder = props => {\n    const [purchasing,setPurchasing] = useState(false);\n\n    //dispatches an action to a redux store.\n    const dispatch = useDispatch();\n\n\n      const ings = useSelector(state => {return state.burgerBuilder.ingredients;});\n      const price = useSelector(state => state.burgerBuilder.totalPrice);\n      const error = useSelector(state => state.burgerBuilder.error);\n      const isAuthenticated = useSelector(state => state.auth.token !== null);\n    \n      const onIngredientAdded = ingName => dispatch(actions.addIngredient(ingName));\n      const onIngredientRemoved = ingName =>\n        dispatch(actions.removeIngredient(ingName));\n      const onInitIngredients = useCallback(\n        () => dispatch(actions.initIngredients()),\n        [dispatch]\n      );\n      const onInitPurchase = () => dispatch(actions.purchaseInit());\n      const onSetAuthRedirectPath = path =>\n        dispatch(actions.setAuthRedirectPath(path));\n    \n\n\n    // const onIngredientsAdded = (ingName) => dispatch(actions.addIngredient(ingName));\n    // const onIngredientsRemoved = (ingName) => dispatch(actions.removeIngredient(ingName));\n    // const onInitIngredients = () => dispatch(actions.initIngredients());\n    // const onInitPurchase= () => dispatch(actions.purchaseInit());\n    // const onSetAuthRedirectPath = (path) => dispatch(actions.setAuthRedirectPath(path));\n\n    useEffect(() => {\n        onInitIngredients();\n    },[onInitIngredients]);\n\n//I want array of values from ingredients objects and need to reduce it to a single value(Sum)\n//sum is constantly updated in reduce function by each element(value) of the the array\n//if sum>0 then set purchasable to true or else false.\n//now it returns either true or false.\nconst updatePurchaseState=(ingredients)=>{\n    \n    const sum=Object.keys(ingredients)\n    .map(igKey=>{\n        return ingredients[igKey];\n    })\n    .reduce((sum,elt)=>{\n        return sum+elt;\n    },0);\n    return sum>0;\n\n};\n\n\nconst purchaseHandler=()=>{\n    if(props.isAuthenticated){\n        setPurchasing(true);\n    }else{\n        onSetAuthRedirectPath('/checkout');\n        props.history.push('/auth');\n    }\n   \n}\n\nconst purchaseCancelHandler=()=>{\n    setPurchasing(false);\n}\n\nconst purchaseContinueHandler=()=>{\n    // // alert('You can Continue...!')\n    onInitPurchase();\n    props.history.push('/checkout');\n}\n\n        //tell which button should be enabled or disabled. \n        const disabledInfo={\n            ...props.ings\n        };\n        for(let key in disabledInfo){\n            disabledInfo[key]=disabledInfo[key]<=0\n        }\n        //{salad:true,meat:false,...} and if its true then it is disabled.\n\n        let orderSummary=null;\n        //will render spinner for a fraction of second when we load app for the first time..\n        let burger = props.error ? <p>Ingredients can't be loaded!</p> : <Spinner />;\n\n        if(props.ings){\n            burger=(\n                <Aux>\n                    <Burger ingredients={props.ings}/>\n                    <BurgerControls \n                        ingredientsAdd={onIngredientsAdded} \n                        ingredientsRemove={onIngredientsRemoved}\n                        disabled={disabledInfo}\n                        purchasable={updatePurchaseState(props.ings)}\n                        displayOrder={purchaseHandler}\n                        isAuth={props.isAuthenticated}\n                        price={props.price}/>\n                </Aux>\n            );\n            orderSummary=<OrderSummary \n            ingredients={props.ings}\n            orderCancelled={purchaseCancelHandler}\n            orderContinue={purchaseContinueHandler}\n            price={props.price}/>;\n        }\n\n        return(\n            <Aux>\n                {/*OrderSummary is re0rendending again agian bcz it uses setState (states that are changed),so to avoid this\n                if the model is you want to display then only order summary should be re-renderrd else not */}\n                <Modal \n                show={purchasing} \n                modalClosed={purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burger}\n                \n            </Aux>    \n        );\n    }\n\n\nconst mapStateToProps = state => {\n    return {\n        ings:state.burgerBuilder.ingredients,\n        price:state.burgerBuilder.totalPrice,\n        error:state.burgerBuilder.error,\n        isAuthenticated:state.auth.token !== null\n    };\n}\n\n const mapDispatchToProps = dispatch => {\n    return{\n        onIngredientsAdded : (ingName) => dispatch(actions.addIngredient(ingName)),\n        onIngredientsRemoved : (ingName) => dispatch(actions.removeIngredient(ingName)),\n        onInitIngredients : () => dispatch(actions.initIngredients()),\n        onInitPurchase: () => dispatch(actions.purchaseInit()),\n        onSetAuthRedirectPath : (path) => dispatch(actions.setAuthRedirectPath(path))\n    }\n\n }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(BurgerBuilder,axios));\n\n\n"]},"metadata":{},"sourceType":"module"}