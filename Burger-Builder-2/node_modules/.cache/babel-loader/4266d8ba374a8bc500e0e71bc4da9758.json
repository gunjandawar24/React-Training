{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Orders/Orders.js\";\nimport React, { useEffect } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst Orders = props => {\n  const {\n    onFetchOrders\n  } = props;\n  useEffect(() => {\n    onFetchOrders(props.token, props.userId);\n  }, [onFetchOrders]);\n  let orders = /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 22\n    }\n  });\n\n  if (!props.loading) {\n    orders = props.orders.map(order => /*#__PURE__*/React.createElement(Order, {\n      key: order.id,\n      ingredients: order.ingredients,\n      price: order.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  return orders;\n};\n\nconst mapStateToProps = state => {\n  return {\n    orders: state.order.orders,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));","map":{"version":3,"sources":["/home/gunjan/Desktop/React-hooks/bb-project(using hooks)/src/containers/Orders/Orders.js"],"names":["React","useEffect","Order","axios","withErrorHandler","actions","connect","Spinner","Orders","props","onFetchOrders","token","userId","orders","loading","map","order","id","ingredients","price","mapStateToProps","state","auth","mapDispatchToProps","dispatch","fetchOrders"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,8BAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,qCAApB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAK;AAErB,QAAM;AAACC,IAAAA;AAAD,MAAkBD,KAAxB;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,aAAa,CAACD,KAAK,CAACE,KAAP,EAAaF,KAAK,CAACG,MAAnB,CAAb;AACH,GAFQ,EAEP,CAACF,aAAD,CAFO,CAAT;AAII,MAAIG,MAAM,gBAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAb;;AACA,MAAG,CAACJ,KAAK,CAACK,OAAV,EAAmB;AACfD,IAAAA,MAAM,GACFJ,KAAK,CAACI,MAAN,CAAaE,GAAb,CAAiBC,KAAK,iBAClB,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,KAAK,CAACC,EADf;AAEI,MAAA,WAAW,EAAED,KAAK,CAACE,WAFvB;AAGI,MAAA,KAAK,EAAEF,KAAK,CAACG,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAOH;;AACD,SAAON,MAAP;AACH,CAlBL;;AAoBA,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAE/B,SAAM;AACFR,IAAAA,MAAM,EAACQ,KAAK,CAACL,KAAN,CAAYH,MADjB;AAEFC,IAAAA,OAAO,EAACO,KAAK,CAACL,KAAN,CAAYF,OAFlB;AAGFH,IAAAA,KAAK,EAACU,KAAK,CAACC,IAAN,CAAWX,KAHf;AAIFC,IAAAA,MAAM,EAACS,KAAK,CAACC,IAAN,CAAWV;AAJhB,GAAN;AAMH,CARD;;AAUA,MAAMW,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHd,IAAAA,aAAa,EAAE,CAACC,KAAD,EAAOC,MAAP,KAAkBY,QAAQ,CAACnB,OAAO,CAACoB,WAAR,CAAoBd,KAApB,EAA0BC,MAA1B,CAAD;AADtC,GAAP;AAGH,CAJD;;AAMA,eAAeN,OAAO,CAACc,eAAD,EAAiBG,kBAAjB,CAAP,CAA4CnB,gBAAgB,CAACI,MAAD,EAASL,KAAT,CAA5D,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport Order from '../../components/Order/Order';\nimport axios from '../../axios-orders';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../store/actions/index';\nimport {connect} from 'react-redux';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nconst Orders = props =>  {\n   \n    const {onFetchOrders} = props;\n    useEffect(() => {\n        onFetchOrders(props.token,props.userId);\n    },[onFetchOrders]);\n    \n        let orders = <Spinner  />;\n        if(!props.loading) {\n            orders = \n                props.orders.map(order => (\n                    <Order \n                        key={order.id}\n                        ingredients={order.ingredients}\n                        price={order.price} />\n                ))\n        }\n        return orders;\n    }\n\nconst mapStateToProps = (state) => {\n    \n    return{\n        orders:state.order.orders,\n        loading:state.order.loading,\n        token:state.auth.token,\n        userId:state.auth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token,userId))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders, axios));"]},"metadata":{},"sourceType":"module"}