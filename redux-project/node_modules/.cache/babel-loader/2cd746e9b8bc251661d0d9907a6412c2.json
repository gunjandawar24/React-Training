{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nconst initialState = {\n  results: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.STORE_RESULT:\n      /* You cannot do this in reducer file */\n      // setTimeout(()=> {\n      //     return {\n      //           new state...\n      //     }\n      // },2000);\n      return { ...state,\n        results: state.results.concat({\n          id: new Date(),\n          value: action.result\n        })\n      };\n\n    case actionTypes.DELETE_RESULT:\n      //****One Way  to immutably changing the results***\n      //but it does not do deep cloning.\n      // const id=2;\n      // const newArray=[...state.results];\n      // newArray.splice(id,1);\n      //this will mutate our original state\n      // state.results.splice(id,1);\n\n      /*here it checks every elt id of array with the one to delete,if does not matches \n      *then create a new array with those elements and leave which matches that given condition*/\n      const updatedArray = state.results.filter(result => result.id !== action.resultElId);\n      return { ...state,\n        results: updatedArray\n      };\n  } //it returns thr current  state.\n\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/gunjan/Desktop/redux-project/src/store/reducers/result.js"],"names":["actionTypes","initialState","results","reducer","state","action","type","STORE_RESULT","concat","id","Date","value","result","DELETE_RESULT","updatedArray","filter","resultElId"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC;AADS,CAArB;;AAKA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAE9C,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKN,WAAW,CAACO,YAAjB;AAEI;AACA;AACA;AACA;AACA;AACA;AAEA,aAAM,EACF,GAAGH,KADD;AAEFF,QAAAA,OAAO,EAACE,KAAK,CAACF,OAAN,CAAcM,MAAd,CAAqB;AAACC,UAAAA,EAAE,EAAC,IAAIC,IAAJ,EAAJ;AAAgBC,UAAAA,KAAK,EAACN,MAAM,CAACO;AAA7B,SAArB;AAFN,OAAN;;AAKJ,SAAKZ,WAAW,CAACa,aAAjB;AACI;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;AAEA,YAAMC,YAAY,GAACV,KAAK,CAACF,OAAN,CAAca,MAAd,CAAqBH,MAAM,IAAIA,MAAM,CAACH,EAAP,KAAcJ,MAAM,CAACW,UAApD,CAAnB;AACA,aAAM,EACF,GAAGZ,KADD;AAEFF,QAAAA,OAAO,EAACY;AAFN,OAAN;AA7BR,GAF8C,CAoC9C;;;AACA,SAAOV,KAAP;AACH,CAtCD;;AAwCA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    results:[]\n}\n\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type){\n     \n        case actionTypes.STORE_RESULT :\n\n            /* You cannot do this in reducer file */\n            // setTimeout(()=> {\n            //     return {\n            //           new state...\n            //     }\n            // },2000);\n\n            return{\n                ...state,\n                results:state.results.concat({id:new Date() ,value:action.result})\n            }\n        \n        case actionTypes.DELETE_RESULT :\n            //****One Way  to immutably changing the results***\n            //but it does not do deep cloning.\n            // const id=2;\n            // const newArray=[...state.results];\n            // newArray.splice(id,1);\n\n            //this will mutate our original state\n            // state.results.splice(id,1);\n\n            /*here it checks every elt id of array with the one to delete,if does not matches \n            *then create a new array with those elements and leave which matches that given condition*/\n            const updatedArray=state.results.filter(result => result.id !== action.resultElId);\n            return{\n                ...state,\n                results:updatedArray\n            }    \n    }\n    //it returns thr current  state.\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}