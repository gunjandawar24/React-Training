{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      //we should be in sign up mode initially.\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    //converting state object into array\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    } //now i'll loop through the array and create a form using jsx <Input />\n\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }));\n\n    if (this.props.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }\n      });\n    }\n\n    let errorMessage = null;\n\n    if (this.props.error) {\n      errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }\n      }, this.props.error);\n    } //after authentication redirect to either checkout page or to the home('/') page.\n\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 28\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      btnType: \"Danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }\n    }, \"SWITCH TO \", this.state.isSignUp ? 'SIGNIN' : 'SIGNUP'));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","Spinner","connect","Redirect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React , { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nclass Auth extends Component {\n\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail:true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        //we should be in sign up mode initially.\n        isSignUp:true\n    }\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp);\n    }\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignUp:!prevState.isSignUp};\n        })\n    }\n\n    render() {\n\n        //converting state object into array\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        //now i'll loop through the array and create a form using jsx <Input />\n        let form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        if(this.props.loading){\n            form = <Spinner />\n        }\n\n        let errorMessage =null;\n        if(this.props.error){\n            errorMessage = (\n            <p>{this.props.error}</p>\n            );\n        }\n        \n        //after authentication redirect to either checkout page or to the home('/') page.\n        let authRedirect = null ;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SIGNUP' }</Button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath : state.auth.authRedirectPath\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email,password,isSignUp) => dispatch(actions.auth(email,password,isSignUp)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}