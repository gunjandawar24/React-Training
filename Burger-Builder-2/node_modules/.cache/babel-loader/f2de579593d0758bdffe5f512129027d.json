{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value);\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    //converting state object into array\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    } //now i'll loop through the array and create a form using jsx <Input />\n\n\n    const form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, form, /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password) => dispatch(actions.auth(email, password))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/Auth/Auth.js"],"names":["React","Component","Input","Button","classes","actions","connect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAAQC,OAAR,QAAsB,aAAtB;;AAEA,MAAMC,IAAN,SAAmBN,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAEzBO,KAFyB,GAEjB;AACJC,MAAAA,QAAQ,EAAG;AACPC,QAAAA,KAAK,EAAE;AACHC,UAAAA,WAAW,EAAE,OADV;AAEHC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,OADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFZ;AAMHC,UAAAA,KAAK,EAAE,EANJ;AAOHC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERC,YAAAA,OAAO,EAAC;AAFA,WAPT;AAWHC,UAAAA,KAAK,EAAE,KAXJ;AAYHC,UAAAA,OAAO,EAAE;AAZN,SADA;AAePC,QAAAA,QAAQ,EAAE;AACNV,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,aAAa,EAAE;AACXC,YAAAA,IAAI,EAAE,UADK;AAEXC,YAAAA,WAAW,EAAE;AAFF,WAFT;AAMNC,UAAAA,KAAK,EAAE,EAND;AAONC,UAAAA,UAAU,EAAE;AACRC,YAAAA,QAAQ,EAAE,IADF;AAERK,YAAAA,SAAS,EAAC;AAFF,WAPN;AAWNH,UAAAA,KAAK,EAAE,KAXD;AAYNC,UAAAA,OAAO,EAAE;AAZH;AAfH;AADP,KAFiB;;AAAA,SAmEzBG,mBAnEyB,GAmEH,CAACC,KAAD,EAAQC,WAAR,KAAwB;AAC1C,YAAMC,eAAe,GAAG,EACpB,GAAG,KAAKlB,KAAL,CAAWC,QADM;AAEpB,SAACgB,WAAD,GAAe,EACX,GAAG,KAAKjB,KAAL,CAAWC,QAAX,CAAoBgB,WAApB,CADQ;AAEXV,UAAAA,KAAK,EAAES,KAAK,CAACG,MAAN,CAAaZ,KAFT;AAGXI,UAAAA,KAAK,EAAE,KAAKS,aAAL,CAAmBJ,KAAK,CAACG,MAAN,CAAaZ,KAAhC,EAAuC,KAAKP,KAAL,CAAWC,QAAX,CAAoBgB,WAApB,EAAiCT,UAAxE,CAHI;AAIXI,UAAAA,OAAO,EAAE;AAJE;AAFK,OAAxB;AASA,WAAKS,QAAL,CAAc;AAACpB,QAAAA,QAAQ,EAAEiB;AAAX,OAAd;AACH,KA9EwB;;AAAA,SAgFzBI,aAhFyB,GAgFRN,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAACO,cAAN;AACA,WAAKC,KAAL,CAAWC,MAAX,CAAkB,KAAKzB,KAAL,CAAWC,QAAX,CAAoBC,KAApB,CAA0BK,KAA5C,EAAkD,KAAKP,KAAL,CAAWC,QAAX,CAAoBY,QAApB,CAA6BN,KAA/E;AACH,KAnFwB;AAAA;;AAoCzBa,EAAAA,aAAa,CAACb,KAAD,EAAQmB,KAAR,EAAe;AACxB,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAI,CAACD,KAAL,EAAY;AACR,aAAO,IAAP;AACH;;AAED,QAAIA,KAAK,CAACjB,QAAV,EAAoB;AAChBkB,MAAAA,OAAO,GAAGpB,KAAK,CAACqB,IAAN,OAAiB,EAAjB,IAAuBD,OAAjC;AACH;;AAED,QAAID,KAAK,CAACZ,SAAV,EAAqB;AACjBa,MAAAA,OAAO,GAAGpB,KAAK,CAACsB,MAAN,IAAgBH,KAAK,CAACZ,SAAtB,IAAmCa,OAA7C;AACH;;AAED,QAAID,KAAK,CAACI,SAAV,EAAqB;AACjBH,MAAAA,OAAO,GAAGpB,KAAK,CAACsB,MAAN,IAAgBH,KAAK,CAACI,SAAtB,IAAmCH,OAA7C;AACH;;AAED,QAAID,KAAK,CAAChB,OAAV,EAAmB;AACf,YAAMqB,OAAO,GAAG,uIAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAazB,KAAb,KAAuBoB,OAAjC;AACH;;AAED,QAAID,KAAK,CAACO,SAAV,EAAqB;AACjB,YAAMF,OAAO,GAAG,OAAhB;AACAJ,MAAAA,OAAO,GAAGI,OAAO,CAACC,IAAR,CAAazB,KAAb,KAAuBoB,OAAjC;AACH;;AAED,WAAOA,OAAP;AACH;;AAoBDO,EAAAA,MAAM,GAAG;AAEL;AACA,UAAMC,iBAAiB,GAAG,EAA1B;;AACA,SAAK,IAAIC,GAAT,IAAgB,KAAKpC,KAAL,CAAWC,QAA3B,EAAqC;AACjCkC,MAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,QAAAA,EAAE,EAAEF,GADe;AAEnBG,QAAAA,MAAM,EAAE,KAAKvC,KAAL,CAAWC,QAAX,CAAoBmC,GAApB;AAFW,OAAvB;AAIH,KATI,CAWL;;;AACA,UAAMI,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAuBC,WAAW,iBAC3C,oBAAC,KAAD;AACI,MAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,MAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBpC,WAFpC;AAGI,MAAA,aAAa,EAAEuC,WAAW,CAACH,MAAZ,CAAmBnC,aAHtC;AAII,MAAA,KAAK,EAAEsC,WAAW,CAACH,MAAZ,CAAmBhC,KAJ9B;AAKI,MAAA,OAAO,EAAE,CAACmC,WAAW,CAACH,MAAZ,CAAmB5B,KALjC;AAMI,MAAA,cAAc,EAAE+B,WAAW,CAACH,MAAZ,CAAmB/B,UANvC;AAOI,MAAA,OAAO,EAAEkC,WAAW,CAACH,MAAZ,CAAmB3B,OAPhC;AAQI,MAAA,OAAO,EAAII,KAAF,IAAa,KAAKD,mBAAL,CAA0BC,KAA1B,EAAiC0B,WAAW,CAACJ,EAA7C,CAR1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS,CAAb;AAYA,wBACI;AAAK,MAAA,SAAS,EAAE1C,OAAO,CAACG,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,QAAQ,EAAE,KAAKuB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKkB,IADL,eAEI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,CADJ,CADJ;AAQH;;AArHwB;;AAwH7B,MAAMG,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHnB,IAAAA,MAAM,EAAG,CAACvB,KAAD,EAAOW,QAAP,KAAoB+B,QAAQ,CAAC/C,OAAO,CAACgD,IAAR,CAAa3C,KAAb,EAAmBW,QAAnB,CAAD;AADlC,GAAP;AAGH,CAJD;;AAQA,eAAef,OAAO,CAAC,IAAD,EAAM6C,kBAAN,CAAP,CAAiC5C,IAAjC,CAAf","sourcesContent":["import React , { Component } from 'react';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport {connect} from 'react-redux';\n\nclass Auth extends Component {\n\n    state = {\n        controls : {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail:true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            }\n        }\n    }\n\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n        this.setState({controls: updatedControls});\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value)\n    }\n\n    render() {\n\n        //converting state object into array\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        //now i'll loop through the array and create a form using jsx <Input />\n        const form = formElementsArray.map( formElement => (\n            <Input\n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                shouldValidate={formElement.config.validation}\n                touched={formElement.config.touched}\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\n        ) );\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth : (email,password) => dispatch(actions.auth(email,password))\n    }\n}\n\n\n\nexport default connect(null,mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}