{"ast":null,"code":"var _jsxFileName = \"/home/gunjan/Desktop/bb-project/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: ''\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      //avoid reloading the page(does not make a new request.)\n      event.preventDefault(); // console.log(this.props.ingredients);\n\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } // const order = {\n      //     ingredients: this.props.ingredients,\n      //     price: this.props.price,\n      //     orderData: formData\n      // }\n      // axios.post( '/orders.json', order )\n      //     .then( response => {\n      //         this.setState( { loading: false } );\n      //         this.props.history.push( '/' );\n      //     } )\n      //     .catch( error => {\n      //         this.setState( { loading: false } );\n      //     } );\n\n\n      this.setState({\n        loading: true\n      });\n      const order = {\n        ingredients: this.props.ingredients,\n        //recalculate the price on server (in real App)\n        price: this.props.price,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        this.setState({\n          loading: false\n        }); //will take me back to home page after clicking order.\n\n        this.props.history.push('/'); // console.log(response)\n      }).catch(error => {\n        //  console.log(error));\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      }; //Example-email\n\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      }; //Setting its value\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  render() {\n    //convert orderForm object into array so that i can loop through.\n    // i am pushing object into an array..\n    //id:key -> name,street..\n    //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n    const formElementsArray = [];\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      btnType: \"Success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/React.createElement(Spinner, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.ContactData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, \"Enter Your Contact Details : \"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","Spinner","axios","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","street","zipCode","country","email","deliveryMethod","options","displayValue","loading","orderHandler","event","preventDefault","formData","formElementIdentifier","setState","order","ingredients","props","price","orderData","post","then","response","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","render","formElementsArray","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport axios from '../../../axios-orders'\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation:{\n                    required:true\n                },\n                valid:false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: ''\n            }\n        },\n        loading: false\n    }\n\n    orderHandler = (event) => {\n        //avoid reloading the page(does not make a new request.)\n        event.preventDefault();\n        // console.log(this.props.ingredients);\n \n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        // const order = {\n        //     ingredients: this.props.ingredients,\n        //     price: this.props.price,\n        //     orderData: formData\n        // }\n        // axios.post( '/orders.json', order )\n        //     .then( response => {\n        //         this.setState( { loading: false } );\n        //         this.props.history.push( '/' );\n        //     } )\n        //     .catch( error => {\n        //         this.setState( { loading: false } );\n        //     } );\n\n\n\n\n\n        this.setState({ loading:true });\n        const order ={\n        ingredients:this.props.ingredients,\n        //recalculate the price on server (in real App)\n        price:this.props.price,\n        orderData: formData\n       \n        \n    }\n    \n    axios.post('/orders.json',order)\n    .then(response => {\n        this.setState({ loading:false});\n        //will take me back to home page after clicking order.\n        this.props.history.push('/');\n        // console.log(response)\n    })\n    .catch(error =>{\n        //  console.log(error));\n         this.setState({ loading:false});\n    });\n            \n    }\n\n    //here i want to clone deeply.(bcoz order object has nested objects \n    // and when we mutate using setState it will change original data.)\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        //Example-email\n        const updatedFormElement = { \n            ...updatedOrderForm[inputIdentifier]\n        };\n        //Setting its value\n        updatedFormElement.value = event.target.value;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        this.setState({orderForm: updatedOrderForm});\n    }\n\n    render(){\n\n        //convert orderForm object into array so that i can loop through.\n        // i am pushing object into an array..\n        //id:key -> name,street..\n        //config:this.state.orderForm[key] ->stores all the config details.(right side data)\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = ( \n        <form onSubmit={this.orderHandler}>\n            {/* <Input inputtype=\"input\"  type=\"text\" name=\"name\" placeholder=\"Your name\" /> */}\n            \n            {formElementsArray.map(formElement => (\n                    <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} \n                        />\n                ))}\n\n            <Button btnType=\"Success\">Order</Button>\n        </form>\n);\n        if(this.state.loading){\n            form = <Spinner />\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Details : </h4>\n                {form}\n            </div>\n\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}