{"ast":null,"code":"//i want to dispatch the action when sumit button is clicked.\nimport * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios'; //this is used to set a loading state and show a spinner..\n\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    idToken: token,\n    userId: userId\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n}; //async code to authenticate the user.\n\nexport const auth = (email, password, isSignUp) => {\n  return dispatch => {\n    dispatch(authStart()); //this will be transformed to json by axios automatically.\n\n    const authData = {\n      email: email,\n      password,\n      password,\n      //whether you wnat to get the token or not from the server.\n      returnSecureToken: true\n    };\n    let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDdyN2cPoOmRAV3mY8gpozrqxB1Q_ecyPQ'; //to validate a user..\n\n    if (!isSignUp) {\n      url = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDdyN2cPoOmRAV3mY8gpozrqxB1Q_ecyPQ';\n    }\n\n    axios.post(url, authData).then(response => {\n      console.log(response);\n      dispatch(authSuccess(response.data.idToken, response.data.localId));\n    }).catch(err => {\n      console.log(err);\n      console.log(err.response.data.errors);\n      dispatch(authFail(err.response.data.error));\n    });\n  };\n};","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","idToken","authFail","error","AUTH_FAIL","auth","email","password","isSignUp","dispatch","authData","returnSecureToken","url","post","then","response","console","log","data","localId","catch","err","errors"],"mappings":"AAAA;AACA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAACH,WAAW,CAACI;AADd,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAkB;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAACH,WAAW,CAACQ,YADd;AAEHC,IAAAA,OAAO,EAACH,KAFL;AAGHC,IAAAA,MAAM,EAACA;AAHJ,GAAP;AAKH,CANM;AAQP,OAAO,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACHR,IAAAA,IAAI,EAACH,WAAW,CAACY,SADd;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAME,IAAI,GAAG,CAACC,KAAD,EAAOC,QAAP,EAAgBC,QAAhB,KAA6B;AAC7C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR,CADe,CAEf;;AACA,UAAMgB,QAAQ,GAAG;AACbJ,MAAAA,KAAK,EAACA,KADO;AAEbC,MAAAA,QAFa;AAEJA,MAAAA,QAFI;AAGb;AACAI,MAAAA,iBAAiB,EAAC;AAJL,KAAjB;AAMA,QAAIC,GAAG,GAAG,uGAAV,CATe,CAUf;;AACA,QAAG,CAACJ,QAAJ,EAAa;AACTI,MAAAA,GAAG,GAAC,mHAAJ;AACH;;AAEDnB,IAAAA,KAAK,CAACoB,IAAN,CAAWD,GAAX,EAAeF,QAAf,EACKI,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAN,MAAAA,QAAQ,CAACZ,WAAW,CAACkB,QAAQ,CAACG,IAAT,CAAcjB,OAAf,EAAuBc,QAAQ,CAACG,IAAT,CAAcC,OAArC,CAAZ,CAAR;AACH,KAJL,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACN,QAAJ,CAAaG,IAAb,CAAkBI,MAA9B;AAEAb,MAAAA,QAAQ,CAACP,QAAQ,CAACmB,GAAG,CAACN,QAAJ,CAAaG,IAAb,CAAkBf,KAAnB,CAAT,CAAR;AACH,KAVL;AAWH,GA1BD;AA2BH,CA5BM","sourcesContent":["//i want to dispatch the action when sumit button is clicked.\nimport * as actionTypes from '../actions/actionTypes';\nimport axios from 'axios';\n\n//this is used to set a loading state and show a spinner..\nexport const authStart = () => {\n    return {\n        type:actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token,userId) => {\n    return {\n        type:actionTypes.AUTH_SUCCESS,\n        idToken:token,\n        userId:userId\n    }\n}\n\nexport const authFail = (error) => {\n    return {\n        type:actionTypes.AUTH_FAIL,\n        error:error\n    }\n}\n\n//async code to authenticate the user.\nexport const auth = (email,password,isSignUp) => {\n    return dispatch => {\n        dispatch(authStart());\n        //this will be transformed to json by axios automatically.\n        const authData = {\n            email:email,\n            password,password,\n            //whether you wnat to get the token or not from the server.\n            returnSecureToken:true\n        }\n        let url = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDdyN2cPoOmRAV3mY8gpozrqxB1Q_ecyPQ';\n        //to validate a user..\n        if(!isSignUp){\n            url='https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDdyN2cPoOmRAV3mY8gpozrqxB1Q_ecyPQ';\n        }\n        \n        axios.post(url,authData)\n            .then(response => {\n                console.log(response);\n                dispatch(authSuccess(response.data.idToken,response.data.localId));\n            })\n            .catch(err => {\n                console.log(err);\n                console.log(err.response.data.errors);\n                \n                dispatch(authFail(err.response.data.error));\n            })\n    }\n} "]},"metadata":{},"sourceType":"module"}