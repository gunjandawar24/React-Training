{"ast":null,"code":"import * as actioTypes from './actionTypes';\nimport axios from '../../axios-orders'; //onSuccess=id and orderData is fetched from the backend becoz we want store it in the orders array.\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFail = error => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_START\n  };\n}; //async action-creator \n//this action gets dispatched once we click the order button.\n//here orderdata is like userData ,addIngredients..\n\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      console.log(response.data);\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerFail(error));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: actioTypes.PURCHASE_INIT\n  };\n}; //error here is handled using high order component wrap to connect in ContactData\n\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actioTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actioTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n}; //this will set loading to true.\n\nexport const fetchOrdersStart = () => {\n  return {\n    type: actioTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {\n    //this will set loading to true first.\n    dispatch(fetchOrdersStart());\n    axios.get('/orders.json').then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        fetchedOrders.push({ ...res.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["/home/gunjan/Desktop/bb-project/src/store/actions/order.js"],"names":["actioTypes","axios","purchaseBurgerSuccess","id","orderData","type","PURCHASE_BURGER_SUCCESS","orderId","purchaseBurgerFail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","dispatch","post","then","response","console","log","data","name","catch","purchaseInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","fetchOrdersStart","FETCH_ORDERS_START","fetchOrders","get","res","fetchedOrders","key","push","err"],"mappings":"AAAA,OAAO,KAAKA,UAAZ,MAA4B,eAA5B;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CAEA;;AACA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAIC,SAAJ,KAAkB;AACnD,SAAM;AACFC,IAAAA,IAAI,EAACL,UAAU,CAACM,uBADd;AAEFC,IAAAA,OAAO,EAACJ,EAFN;AAGFC,IAAAA,SAAS,EAACA;AAHR,GAAN;AAMH,CAPM;AASP,OAAO,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAO;AACHJ,IAAAA,IAAI,EAACL,UAAU,CAACU,oBADb;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAKH,CANM;AAQP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAM;AACFN,IAAAA,IAAI,EAACL,UAAU,CAACY;AADd,GAAN;AAGH,CAJM,C,CAMP;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIT,SAAD,IAAe;AACzC,SAAOU,QAAQ,IAAI;AAEfA,IAAAA,QAAQ,CAACH,mBAAmB,EAApB,CAAR;AACAV,IAAAA,KAAK,CAACc,IAAN,CAAW,cAAX,EAA0BX,SAA1B,EACHY,IADG,CACEC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACAN,MAAAA,QAAQ,CAACZ,qBAAqB,CAACe,QAAQ,CAACG,IAAT,CAAcC,IAAf,EAAoBjB,SAApB,CAAtB,CAAR;AACH,KAJG,EAKHkB,KALG,CAKGb,KAAK,IAAG;AACXK,MAAAA,QAAQ,CAACN,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACH,KAPG;AAQH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMc,YAAY,GAAG,MAAM;AAC9B,SAAM;AACFlB,IAAAA,IAAI,EAACL,UAAU,CAACwB;AADd,GAAN;AAGH,CAJM,C,CAMP;;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHrB,IAAAA,IAAI,EAACL,UAAU,CAAC2B,oBADb;AAEHD,IAAAA,MAAM,EAACA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAInB,KAAD,IAAW;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAACL,UAAU,CAACU,oBADb;AAEHD,IAAAA,KAAK,EAACA;AAFH,GAAP;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMoB,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHxB,IAAAA,IAAI,EAACL,UAAU,CAAC8B;AADb,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,SAAOjB,QAAQ,IAAI;AACf;AACAA,IAAAA,QAAQ,CAACe,gBAAgB,EAAjB,CAAR;AACA5B,IAAAA,KAAK,CAAC+B,GAAN,CAAU,cAAV,EACKhB,IADL,CACUiB,GAAG,IAAI;AACT,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,GAAG,CAACb,IAApB,EAA0B;AACtBc,QAAAA,aAAa,CAACE,IAAd,CAAmB,EACf,GAAGH,GAAG,CAACb,IAAJ,CAASe,GAAT,CADY;AAEfhC,UAAAA,EAAE,EAAEgC;AAFW,SAAnB;AAIH;;AACDrB,MAAAA,QAAQ,CAACW,kBAAkB,CAACS,aAAD,CAAnB,CAAR;AACH,KAVL,EAWKZ,KAXL,CAWWe,GAAG,IAAI;AACVvB,MAAAA,QAAQ,CAACc,eAAe,CAACS,GAAD,CAAhB,CAAR;AACH,KAbL;AAcH,GAjBD;AAkBH,CAnBM","sourcesContent":["import * as actioTypes from './actionTypes';\nimport axios from '../../axios-orders';\n\n//onSuccess=id and orderData is fetched from the backend becoz we want store it in the orders array.\nexport const purchaseBurgerSuccess = (id,orderData) => {\n    return{\n        type:actioTypes.PURCHASE_BURGER_SUCCESS,\n        orderId:id,\n        orderData:orderData\n    };\n\n};\n\nexport const purchaseBurgerFail = (error) => {\n    return {\n        type:actioTypes.PURCHASE_BURGER_FAIL,\n        error:error\n    }\n\n};\n\nexport const purchaseBurgerStart = () => {\n    return{\n        type:actioTypes.PURCHASE_BURGER_START\n    }\n}\n\n//async action-creator \n//this action gets dispatched once we click the order button.\n//here orderdata is like userData ,addIngredients..\nexport const purchaseBurger = (orderData) => {\n    return dispatch => {\n\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json',orderData)\n    .then(response => {\n        console.log(response.data);\n        dispatch(purchaseBurgerSuccess(response.data.name,orderData));\n    })\n    .catch(error =>{\n        dispatch(purchaseBurgerFail(error));\n    });\n    }\n}\n\nexport const purchaseInit = () => {\n    return{\n        type:actioTypes.PURCHASE_INIT\n    }\n}\n\n//error here is handled using high order component wrap to connect in ContactData\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type:actioTypes.FETCH_ORDERS_SUCCESS,\n        orders:orders\n    }\n}\n\nexport const fetchOrdersFail = (error) => {\n    return {\n        type:actioTypes.PURCHASE_BURGER_FAIL,\n        error:error\n    }\n}\n\n//this will set loading to true.\nexport const fetchOrdersStart = () => {\n    return {\n        type:actioTypes.FETCH_ORDERS_START\n    }\n}\n\nexport const fetchOrders = () => {\n    return dispatch => {\n        //this will set loading to true first.\n        dispatch(fetchOrdersStart());\n        axios.get('/orders.json')\n            .then(res => {\n                const fetchedOrders = []; \n                for (let key in res.data) {\n                    fetchedOrders.push({\n                        ...res.data[key],\n                        id: key\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchedOrders));\n            })\n            .catch(err => {\n                dispatch(fetchOrdersFail(err));\n            });\n    }\n}"]},"metadata":{},"sourceType":"module"}